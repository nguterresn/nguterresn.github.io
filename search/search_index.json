{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What I'm doing in the weekend... On 2024 How to simulate LGVL using SDL2 on VSCode (MacOS) CMake LGVL On 2023 The basics of CMake CMake Control the ka3005p power supply with an Arduino Due Arduino Board to help you test end of line on your access control system Product On 2022 How can you make your own portable Smoke Extractor Product Data Line Protection using Diodes - How to protect your Microcontroller I/O Electronics Research How to read a datasheet and how it can be misleading (MCP73827) Electronics Research On 2021 Year 2021 Recapitulation Personal notes My process to design a boost converter Electronics Research KiCad Changing website workflow with Mkdocs Website update Arduino Due SPI Slave Mode Arduino SPI Bare-metal Using pinout Python library to create support documentation Python Useful tools How to create a directory generator with Python for your ideas Useful tools Python Tkinter Project Management Choosing MOSFET according to motor specifications Electronics Research Compile, Program, Build and Run a FPGA using Python scripts FPGA Python Matrix Led telling how good you are at playing League of Legends Arduino API Random On 2020 Sensor Monitoring using FPGA connected to ADC (LTC2308) - Eclipse Side FPGA Sensor Monitoring using FPGA connected to ADC (LTC2308) - Quartus Side FPGA ADC FPGA and Avalon Interfaces FPGA Starting on FPGA... FPGA Some useful VS Code Extensions Useful tools About this website Personal notes","title":"Home"},{"location":"#what-im-doing-in-the-weekend","text":"","title":"What I'm doing in the weekend..."},{"location":"#on-2024","text":"","title":"On 2024"},{"location":"#how-to-simulate-lgvl-using-sdl2-on-vscode-macos-cmakelgvl","text":"","title":"How to simulate LGVL using SDL2 on VSCode (MacOS) CMakeLGVL"},{"location":"#on-2023","text":"","title":"On 2023"},{"location":"#the-basics-of-cmake-cmake","text":"","title":"The basics of CMake CMake"},{"location":"#control-the-ka3005p-power-supply-with-an-arduino-due-arduino","text":"","title":"Control the ka3005p power supply with an Arduino Due Arduino"},{"location":"#board-to-help-you-test-end-of-line-on-your-access-control-system-product","text":"","title":"Board to help you test end of line on your access control system Product"},{"location":"#on-2022","text":"","title":"On 2022"},{"location":"#how-can-you-make-your-own-portable-smoke-extractor-product","text":"","title":"How can you make your own portable Smoke Extractor Product"},{"location":"#data-line-protection-using-diodes-how-to-protect-your-microcontroller-io-electronics-research","text":"","title":"Data Line Protection using Diodes - How to protect your Microcontroller I/O Electronics Research"},{"location":"#how-to-read-a-datasheet-and-how-it-can-be-misleading-mcp73827-electronics-research","text":"","title":"How to read a datasheet and how it can be misleading (MCP73827) Electronics Research"},{"location":"#on-2021","text":"","title":"On 2021"},{"location":"#year-2021-recapitulation-personal-notes","text":"","title":"Year 2021 Recapitulation Personal notes"},{"location":"#my-process-to-design-a-boost-converter-electronics-research-kicad","text":"","title":"My process to design a boost converter Electronics Research KiCad"},{"location":"#changing-website-workflow-with-mkdocs-website-update","text":"","title":"Changing website workflow with Mkdocs Website update"},{"location":"#arduino-due-spi-slave-mode-arduino-spi-bare-metal","text":"","title":"Arduino Due SPI Slave Mode Arduino SPI Bare-metal"},{"location":"#using-pinout-python-library-to-create-support-documentation-python-useful-tools","text":"","title":"Using pinout Python library to create support documentation Python Useful tools"},{"location":"#how-to-create-a-directory-generator-with-python-for-your-ideas-useful-tools-python-tkinter-project-management","text":"","title":"How to create a directory generator with Python for your ideas Useful tools Python Tkinter Project Management"},{"location":"#choosing-mosfet-according-to-motor-specifications-electronics-research","text":"","title":"Choosing MOSFET according to motor specifications Electronics Research"},{"location":"#compile-program-build-and-run-a-fpga-using-python-scripts-fpga-python","text":"","title":"Compile, Program, Build and Run a FPGA using Python scripts FPGA Python"},{"location":"#matrix-led-telling-how-good-you-are-at-playing-league-of-legends-arduino-api-random","text":"","title":"Matrix Led telling how good you are at playing League of Legends Arduino API Random"},{"location":"#on-2020","text":"","title":"On 2020"},{"location":"#sensor-monitoring-using-fpga-connected-to-adc-ltc2308-eclipse-side-fpga","text":"","title":"Sensor Monitoring using FPGA connected to ADC (LTC2308) - Eclipse Side FPGA"},{"location":"#sensor-monitoring-using-fpga-connected-to-adc-ltc2308-quartus-side-fpga-adc","text":"","title":"Sensor Monitoring using FPGA connected to ADC (LTC2308) - Quartus Side FPGA ADC"},{"location":"#fpga-and-avalon-interfaces-fpga","text":"","title":"FPGA and Avalon Interfaces FPGA"},{"location":"#starting-on-fpga-fpga","text":"","title":"Starting on FPGA... FPGA"},{"location":"#some-useful-vs-code-extensions-useful-tools","text":"","title":"Some useful VS Code Extensions Useful tools"},{"location":"#about-this-website-personal-notes","text":"","title":"About this website Personal notes"},{"location":"aboutme/","text":"","title":"Aboutme"},{"location":"content/arduino-spi-slave/","text":"Arduino Due Slave Mode Recently I had the chance of spending time programming an Arduino Due. The idea was to make it work with SPI in a slave mode. Unfortunally, the Arduino library only has support for master mode, so I had to go through the SAM3X8E datasheet and find out how I would do it. This was also the first time I ever bare-metal programmed an 32 bit chip, normally for hobbies, I use the Arduino library. Apart from sharing the code that might be useful for someone else, I want to share some other stuff that I leanerd while trying to establish the SPI communication. First thing : 32 bit microcontrollers are much more complex than 8 bit ones. Ok, it might sound obvious but it really is much more complex! Pin handling : Pins are controlled by a PIO which stands for Parallel Input/Output Controller. Problem is, imagine that the pin also has another function, like SPI MISO line. It is necessary to disable the controller in order to access it! That's why I use something like this in the code: void enableSPIPins () { // 1: Disables the PIO from controlling the corresponding pin (enables peripheral control of the pin). REG_PIOA_PDR |= PIO_PDR_P25 | PIO_PDR_P26 | PIO_PDR_P27 | PIO_PDR_P28 ; } I disable the PIO A from controlling the P25 to P28, which are the ones we need to SPI protocol. From the page 40 of the datasheet , we can see that: As a peripheral A, PA25 has SPI0_MISO and as a peripheral B has the A18, which I suppose that is an ADC pin. Almost everything has to be powered on: apart from enabling the access to the SPI peripheral, it is also necessary to turn on the peripheral power for the instance ID. The SPI0 instance ID is 24, so we can turn it on by: // turn on periheral power (page 38) SPI0 and PIOA. REG_PMC_PCER0 |= PMC_PCER0_PID24 | PMC_PCER0_PID11 ; Final code: #include <Arduino.h> // Pinout https://www.theengineeringprojects.com/wp-content/uploads/2018/09/introduction-to-arduino-due-2-1.png // With arduino macros https://github.com/manitou48/DUEZoo/blob/master/spislave.ino // Good doc https://microchipdeveloper.com/32arm:sam-bare-metal-c-programming // another good code about arduino due SPI slave https://github.com/MrScrith/arduino_due/blob/master/spi_slave.ino // FUNCTIONS void initSPI (); void enableOnReceiveDataInterrupt (); void disableOnReceiveDataInterrupt (); uint8_t readSPIData (); void writeSPIData ( int data ); void waitUntilDataReceived (); void waitUntilDataSent (); void enableSPIPins (); void setup () { Serial . begin ( 115200 ); while ( ! Serial ); initSPI (); } void loop () { waitUntilDataReceived (); uint8_t dataReceived = readSPIData (); Serial . print ( dataReceived ); } void initSPI () { // Sets MISO as OUTPUT // NSS0 (PA28) is pin digital 10 pinMode ( MISO , OUTPUT ); pinMode ( MOSI , INPUT ); pinMode ( SCK , INPUT ); pinMode ( MISO , LOW ); // turn off SPI REG_SPI0_CR = SPI_CR_SPIDIS ; // Write protection is disabled REG_SPI0_WPMR &= ~ ( SPI_WPMR_WPEN ); // turn on periheral power (page 38) SPI0 and PIOA. REG_PMC_PCER0 |= PMC_PCER0_PID24 | PMC_PCER0_PID11 ; enableSPIPins (); // RESET SPI // enable interrupt register // Slave mode & mode fault detection is disabled REG_SPI0_MR &= ~ ( SPI_MR_MSTR ); REG_SPI0_MR |= SPI_MR_MODFDIS ; // Select SPI MODE (NCPHA, CPOL) and number of bits (8 default) REG_SPI0_CSR |= SPI_CSR_BITS_8_BIT | 0x02 ; // turn on SPI REG_SPI0_CR = SPI_CR_SPIEN ; } void enableSPIPins () { // 1: Disables the PIO from controlling the corresponding pin (enables peripheral control of the pin). REG_PIOA_PDR |= PIO_PDR_P25 | PIO_PDR_P26 | PIO_PDR_P27 | PIO_PDR_P28 ; } void enableOnReceiveDataInterrupt () { // Enable interrupt on receive data REG_SPI0_IER |= SPI_IER_RDRF ; } void disableOnReceiveDataInterrupt () { // Disable interrupt on receive data REG_SPI0_IDR |= SPI_IDR_RDRF ; } uint8_t readSPIData () { return REG_SPI0_RDR & 0xFF ; } void writeSPIData ( int data ) { REG_SPI0_TDR = data & 0xFF ; } // We can either use this or an interruption. // Interruption might be better since it is not blocking! void waitUntilDataReceived () { while (( REG_SPI0_SR & SPI_SR_RDRF ) == 0 ); } void waitUntilDataSent () { while (( REG_SPI0_SR & SPI_SR_TDRE ) == 0 ); } Link for the gist!","title":"Arduino Due Slave Mode"},{"location":"content/arduino-spi-slave/#arduino-due-slave-mode","text":"Recently I had the chance of spending time programming an Arduino Due. The idea was to make it work with SPI in a slave mode. Unfortunally, the Arduino library only has support for master mode, so I had to go through the SAM3X8E datasheet and find out how I would do it. This was also the first time I ever bare-metal programmed an 32 bit chip, normally for hobbies, I use the Arduino library. Apart from sharing the code that might be useful for someone else, I want to share some other stuff that I leanerd while trying to establish the SPI communication. First thing : 32 bit microcontrollers are much more complex than 8 bit ones. Ok, it might sound obvious but it really is much more complex! Pin handling : Pins are controlled by a PIO which stands for Parallel Input/Output Controller. Problem is, imagine that the pin also has another function, like SPI MISO line. It is necessary to disable the controller in order to access it! That's why I use something like this in the code: void enableSPIPins () { // 1: Disables the PIO from controlling the corresponding pin (enables peripheral control of the pin). REG_PIOA_PDR |= PIO_PDR_P25 | PIO_PDR_P26 | PIO_PDR_P27 | PIO_PDR_P28 ; } I disable the PIO A from controlling the P25 to P28, which are the ones we need to SPI protocol. From the page 40 of the datasheet , we can see that: As a peripheral A, PA25 has SPI0_MISO and as a peripheral B has the A18, which I suppose that is an ADC pin. Almost everything has to be powered on: apart from enabling the access to the SPI peripheral, it is also necessary to turn on the peripheral power for the instance ID. The SPI0 instance ID is 24, so we can turn it on by: // turn on periheral power (page 38) SPI0 and PIOA. REG_PMC_PCER0 |= PMC_PCER0_PID24 | PMC_PCER0_PID11 ;","title":"Arduino Due Slave Mode"},{"location":"content/arduino-spi-slave/#final-code","text":"#include <Arduino.h> // Pinout https://www.theengineeringprojects.com/wp-content/uploads/2018/09/introduction-to-arduino-due-2-1.png // With arduino macros https://github.com/manitou48/DUEZoo/blob/master/spislave.ino // Good doc https://microchipdeveloper.com/32arm:sam-bare-metal-c-programming // another good code about arduino due SPI slave https://github.com/MrScrith/arduino_due/blob/master/spi_slave.ino // FUNCTIONS void initSPI (); void enableOnReceiveDataInterrupt (); void disableOnReceiveDataInterrupt (); uint8_t readSPIData (); void writeSPIData ( int data ); void waitUntilDataReceived (); void waitUntilDataSent (); void enableSPIPins (); void setup () { Serial . begin ( 115200 ); while ( ! Serial ); initSPI (); } void loop () { waitUntilDataReceived (); uint8_t dataReceived = readSPIData (); Serial . print ( dataReceived ); } void initSPI () { // Sets MISO as OUTPUT // NSS0 (PA28) is pin digital 10 pinMode ( MISO , OUTPUT ); pinMode ( MOSI , INPUT ); pinMode ( SCK , INPUT ); pinMode ( MISO , LOW ); // turn off SPI REG_SPI0_CR = SPI_CR_SPIDIS ; // Write protection is disabled REG_SPI0_WPMR &= ~ ( SPI_WPMR_WPEN ); // turn on periheral power (page 38) SPI0 and PIOA. REG_PMC_PCER0 |= PMC_PCER0_PID24 | PMC_PCER0_PID11 ; enableSPIPins (); // RESET SPI // enable interrupt register // Slave mode & mode fault detection is disabled REG_SPI0_MR &= ~ ( SPI_MR_MSTR ); REG_SPI0_MR |= SPI_MR_MODFDIS ; // Select SPI MODE (NCPHA, CPOL) and number of bits (8 default) REG_SPI0_CSR |= SPI_CSR_BITS_8_BIT | 0x02 ; // turn on SPI REG_SPI0_CR = SPI_CR_SPIEN ; } void enableSPIPins () { // 1: Disables the PIO from controlling the corresponding pin (enables peripheral control of the pin). REG_PIOA_PDR |= PIO_PDR_P25 | PIO_PDR_P26 | PIO_PDR_P27 | PIO_PDR_P28 ; } void enableOnReceiveDataInterrupt () { // Enable interrupt on receive data REG_SPI0_IER |= SPI_IER_RDRF ; } void disableOnReceiveDataInterrupt () { // Disable interrupt on receive data REG_SPI0_IDR |= SPI_IDR_RDRF ; } uint8_t readSPIData () { return REG_SPI0_RDR & 0xFF ; } void writeSPIData ( int data ) { REG_SPI0_TDR = data & 0xFF ; } // We can either use this or an interruption. // Interruption might be better since it is not blocking! void waitUntilDataReceived () { while (( REG_SPI0_SR & SPI_SR_RDRF ) == 0 ); } void waitUntilDataSent () { while (( REG_SPI0_SR & SPI_SR_TDRE ) == 0 ); } Link for the gist!","title":"Final code:"},{"location":"content/boost-converter/","text":"My process to design a boost converter I do have some skills on KiCad but eveything I do is normally very basic - has no requirements and allows me to design the board with a lack of responsability or guidelines to follow. However, to design a boost converter it is necessary to be careful in the way the design is made. The idea was (and still is) to design a boost converter from 5V to 12V, and so it should match these criteria: Work with USB-C@5V. Have a switch On/Off. Find and use a boost converter with, at least, 90% of efficiency. Support two outputs. First designs I did 4 different designs before making it work! Yes, f o u r different ones . It took a lot of time because I underestimate the amount of effort and time to place on this project in order to succeed. Noobie mistake. This project started in July and only in November I had the desired 12V at the output of the board. It takes some time to design and order, and also, the shipping time, which is around 2 weeks. Normally, I would put 2 to 3 days during a mounth to work on this. First board (v0.1) First board was bad. Had design issues and the Bill of Materials was wrong. One of the most important parts of a boost converter is the inductor. It is its responsability to charge and discharge, and therefore output a higher voltage. If the inductor cannot handle the amount of current passing through and used to charge/discharge, it will burn and the boost converter is useless without it. You can clearly see in the image above, the inductor (top of the board, above the boost converter footprint) was dead \ud83d\ude1b. Also, the design is awful! Traces don't follow a pattern, quite random design. v0.2 Board v0.2 was still to fix previous problems on the board. The design was very much the same, I only changed the footprint for the inductor. Instead of using a regular 6.8uH 0603 inductor, I choose to use a new one based on LM2621 DATASHEET : The LM2621\u2019s high switching frequency enables the use of a small surface mount inductor. A 6.8-\u00b5H shielded inductor is suggested. The inductor should have a saturation current rating higher than the peak current it will experience during circuit operation (see Figure 10). Less than 100-m\u03a9 ESR is suggested for high efficiency. Open-core inductors cause flux linkage with circuit components and interfere with the normal operation of the circuit. They should be avoided. For high efficiency, choose an inductor with a high frequency core material, such as ferrite, to reduce the core losses. To minimize radiated noise, use a toroid, pot core or shielded core inductor. The inductor should be connected to the SW pin as close to the IC as possible. Therefore, I looked up for avaialble inductors in TME and got this one - DLG-0504-6R8 FERROCORE . Although the inductor is unshielded, the inductor is made for DC/DC conversions and supports a peak current up to 1.6A. The next version of the board could definitly have a shielded inductor! v0.3 Now that the BOM seemed OK, I thought the next board, the third one, would work. How wrong was I :) I'm still not sure what was the problem with this version of the board - design was not great, but it should, at least, work inefficiently. This time I included a LED to give me some feedback if power was comming from the USB-C cable. Still quite useless - in a user experience view, it is much more useful to have a LED to know if the board is On or Off (next board!). Was also working on this design I started to ask people online (Reddit) about boost converter design guidelines. A gentle soul shared this document with me: Five Steps to a Good PCB Layout of a Boost Converter and told me to look up for delevopment boards that used the same boost converter (which normally manufacturers have). v0.4 This board was my last attempt to make this work. It actually worked, but I had to re-solder almost every component again. Added some cables to input 5V directly into the board using a lab power supply and check the amount of current drew. With a fan in the output working at 12V with an output current of 200mA, the board draws ~600ma. We can check if this value is reasonable by verifying if the effecency of the boost converter is close to the 90% stated on the PAM242 datasheet : I_{in} * V_{in} * n = I_{out} * V_{out} 0.6A * 5V * n = 0.2A * 12V n \\approx 80\\% Not far from the desired and stated 90% but it could be better with an improved design \ud83d\ude01. v1.0 Finally, a board with a great design and, in my opinion, quite aesthetic! You can see the zones created around the components. Much better than using traces to connect everything! Black PCBs look amazing! Download PCB Improvements for upcoming new versions The USB C interface doesnt support Power Delivery, and so it doesn't work if connected to a MacBook Pro, for instance. This is quite concerning since the world is shifting into using PD more and more. I want to make this more universal. Two 12V output are not as usefull as one 12V plus other one at 5V. Changing this would make the product support more types of fans. Portability is key nowdays. If this is small I can make it portable as well. I don't mean it to walk around with this on my pocket, but for organizing purposes - it is way easier if the product is just plug and play . (04/12/2021)","title":"Boost converter"},{"location":"content/boost-converter/#my-process-to-design-a-boost-converter","text":"I do have some skills on KiCad but eveything I do is normally very basic - has no requirements and allows me to design the board with a lack of responsability or guidelines to follow. However, to design a boost converter it is necessary to be careful in the way the design is made. The idea was (and still is) to design a boost converter from 5V to 12V, and so it should match these criteria: Work with USB-C@5V. Have a switch On/Off. Find and use a boost converter with, at least, 90% of efficiency. Support two outputs.","title":"My process to design a boost converter"},{"location":"content/boost-converter/#first-designs","text":"I did 4 different designs before making it work! Yes, f o u r different ones . It took a lot of time because I underestimate the amount of effort and time to place on this project in order to succeed. Noobie mistake. This project started in July and only in November I had the desired 12V at the output of the board. It takes some time to design and order, and also, the shipping time, which is around 2 weeks. Normally, I would put 2 to 3 days during a mounth to work on this.","title":"First designs"},{"location":"content/boost-converter/#first-board-v01","text":"First board was bad. Had design issues and the Bill of Materials was wrong. One of the most important parts of a boost converter is the inductor. It is its responsability to charge and discharge, and therefore output a higher voltage. If the inductor cannot handle the amount of current passing through and used to charge/discharge, it will burn and the boost converter is useless without it. You can clearly see in the image above, the inductor (top of the board, above the boost converter footprint) was dead \ud83d\ude1b. Also, the design is awful! Traces don't follow a pattern, quite random design.","title":"First board (v0.1)"},{"location":"content/boost-converter/#v02","text":"Board v0.2 was still to fix previous problems on the board. The design was very much the same, I only changed the footprint for the inductor. Instead of using a regular 6.8uH 0603 inductor, I choose to use a new one based on LM2621 DATASHEET : The LM2621\u2019s high switching frequency enables the use of a small surface mount inductor. A 6.8-\u00b5H shielded inductor is suggested. The inductor should have a saturation current rating higher than the peak current it will experience during circuit operation (see Figure 10). Less than 100-m\u03a9 ESR is suggested for high efficiency. Open-core inductors cause flux linkage with circuit components and interfere with the normal operation of the circuit. They should be avoided. For high efficiency, choose an inductor with a high frequency core material, such as ferrite, to reduce the core losses. To minimize radiated noise, use a toroid, pot core or shielded core inductor. The inductor should be connected to the SW pin as close to the IC as possible. Therefore, I looked up for avaialble inductors in TME and got this one - DLG-0504-6R8 FERROCORE . Although the inductor is unshielded, the inductor is made for DC/DC conversions and supports a peak current up to 1.6A. The next version of the board could definitly have a shielded inductor!","title":"v0.2"},{"location":"content/boost-converter/#v03","text":"Now that the BOM seemed OK, I thought the next board, the third one, would work. How wrong was I :) I'm still not sure what was the problem with this version of the board - design was not great, but it should, at least, work inefficiently. This time I included a LED to give me some feedback if power was comming from the USB-C cable. Still quite useless - in a user experience view, it is much more useful to have a LED to know if the board is On or Off (next board!). Was also working on this design I started to ask people online (Reddit) about boost converter design guidelines. A gentle soul shared this document with me: Five Steps to a Good PCB Layout of a Boost Converter and told me to look up for delevopment boards that used the same boost converter (which normally manufacturers have).","title":"v0.3"},{"location":"content/boost-converter/#v04","text":"This board was my last attempt to make this work. It actually worked, but I had to re-solder almost every component again. Added some cables to input 5V directly into the board using a lab power supply and check the amount of current drew. With a fan in the output working at 12V with an output current of 200mA, the board draws ~600ma. We can check if this value is reasonable by verifying if the effecency of the boost converter is close to the 90% stated on the PAM242 datasheet : I_{in} * V_{in} * n = I_{out} * V_{out} 0.6A * 5V * n = 0.2A * 12V n \\approx 80\\% Not far from the desired and stated 90% but it could be better with an improved design \ud83d\ude01.","title":"v0.4"},{"location":"content/boost-converter/#v10","text":"Finally, a board with a great design and, in my opinion, quite aesthetic! You can see the zones created around the components. Much better than using traces to connect everything! Black PCBs look amazing! Download PCB","title":"v1.0"},{"location":"content/boost-converter/#improvements-for-upcoming-new-versions","text":"The USB C interface doesnt support Power Delivery, and so it doesn't work if connected to a MacBook Pro, for instance. This is quite concerning since the world is shifting into using PD more and more. I want to make this more universal. Two 12V output are not as usefull as one 12V plus other one at 5V. Changing this would make the product support more types of fans. Portability is key nowdays. If this is small I can make it portable as well. I don't mean it to walk around with this on my pocket, but for organizing purposes - it is way easier if the product is just plug and play . (04/12/2021)","title":"Improvements for upcoming new versions"},{"location":"content/building-singlecopter/","text":"Building a singlecopter! Intro The search for a good mosfet to use to control a 8520 brushless motor was to use it as the main motor of the singlecopter I plan to build. I got some good mosfet alternatives, like the IRLZ44N. I'll eventually test it but for now I only have available an IRF530N, which fits perfectly BUT its threshold is a little bit higher (4V) than the suggested 2V. This means that it shall only work with a 5V PWM a not with a 3.3V one - which sucks, regarding the most popular options nowadays being 3.3V (SAMD21, STM32F103...) However, I managed to test the PCB and it worked flawless\ud83d\udc4c Actually, regarding its excellent behaviour, I could only run the motor at 20% of its power, otherwise I could damage something or harm myself (much fast such wow). System Now that the motor driver has succeed, it is safe to develop the board and join some components. MCU: At first, I thought a good choice would be a STM32F103C8T6 , the same as the BluePill uses. It would facilitate the design and there is a lot of documentation and support for it. BUT there is a shortage of chips and there are none available. Then I tried to go for a more unpopular yet powerful choice - the AVR SAMD11C14 . Small package and ARM Cortex M0+, why not right? Well, the version available in the supplier was only 14 pins and I need MORE! Final choice will be the ATSAMD21E15B -AU, 32 pins seems great. MPU6050 : This uses I2c to be controlled. So at least 2 pins of the MCU will be assigned to this module. 2xServo : Require 2 PWM pins. Might need a level shifter to increase the 3.3V PWM to 5V levels. Motor Driver: Needs 1 PWM pin. Design Guidelines ( ATSAMD21 ) In terms of power: Next to reset pin: Lastly, there is the USB design guidelines... Which seems to be up to the user. If you want a cheap board = then no protection. Otherwise, some effort should be put in the design of the board. Regarding this website: A transfer of electrostatic energy between the host and peripherals may occur when we plug and unplug USBs. This may lead to an ESD event reaching thresholds of tens of thousands of volts. ESD can lead to damage of the delicate internal circuitry of the host or peripheral transceiver. ESD protection is achieved by placing a transient voltage suppression (TVS) diode between the USB port and the USB controller. Ideally, the TVS diode is placed as closely as possible to the USB port to arrest the transient threat as close as possible to the source. In this case, it is great to put a zener diode across the lines of Vbus, D+ and D-: 5.1V one on the Vbus line and two 3.6V on the data lines. These diodes will prevent voltage above the value on the diode of crossing these lines and damage some connected device. What I discovered from my research on design guidelines I started search for boards from Adafruit and Sparkfun, which have open source stuff and had their schematics online. I managed to check this one: As is possible to see, there is no big protection on the USB. On Vbus there is a fuse to prevent over current, but there is no absolutely no protection on electrostatic discharge. Weird right? I thought so. I always thought these boards were designed having in mind the most unconscious user, but I guess I was wrong this whole time. So, despite all the protections available, it is possible to go raw and forget about that. But me, an intellectual, really need this type of protection, because why not. TL:DR you do what you want \ud83d\ude0e Final PCB Previous articles Testing New Website Features and updating the MOSFET situation Choosing MOSFET according to motor specifications","title":"Building a singlecopter!"},{"location":"content/building-singlecopter/#building-a-singlecopter","text":"","title":"Building a singlecopter!"},{"location":"content/building-singlecopter/#intro","text":"The search for a good mosfet to use to control a 8520 brushless motor was to use it as the main motor of the singlecopter I plan to build. I got some good mosfet alternatives, like the IRLZ44N. I'll eventually test it but for now I only have available an IRF530N, which fits perfectly BUT its threshold is a little bit higher (4V) than the suggested 2V. This means that it shall only work with a 5V PWM a not with a 3.3V one - which sucks, regarding the most popular options nowadays being 3.3V (SAMD21, STM32F103...) However, I managed to test the PCB and it worked flawless\ud83d\udc4c Actually, regarding its excellent behaviour, I could only run the motor at 20% of its power, otherwise I could damage something or harm myself (much fast such wow).","title":"Intro"},{"location":"content/building-singlecopter/#system","text":"Now that the motor driver has succeed, it is safe to develop the board and join some components. MCU: At first, I thought a good choice would be a STM32F103C8T6 , the same as the BluePill uses. It would facilitate the design and there is a lot of documentation and support for it. BUT there is a shortage of chips and there are none available. Then I tried to go for a more unpopular yet powerful choice - the AVR SAMD11C14 . Small package and ARM Cortex M0+, why not right? Well, the version available in the supplier was only 14 pins and I need MORE! Final choice will be the ATSAMD21E15B -AU, 32 pins seems great. MPU6050 : This uses I2c to be controlled. So at least 2 pins of the MCU will be assigned to this module. 2xServo : Require 2 PWM pins. Might need a level shifter to increase the 3.3V PWM to 5V levels. Motor Driver: Needs 1 PWM pin.","title":"System"},{"location":"content/building-singlecopter/#design-guidelines-atsamd21","text":"In terms of power: Next to reset pin: Lastly, there is the USB design guidelines... Which seems to be up to the user. If you want a cheap board = then no protection. Otherwise, some effort should be put in the design of the board. Regarding this website: A transfer of electrostatic energy between the host and peripherals may occur when we plug and unplug USBs. This may lead to an ESD event reaching thresholds of tens of thousands of volts. ESD can lead to damage of the delicate internal circuitry of the host or peripheral transceiver. ESD protection is achieved by placing a transient voltage suppression (TVS) diode between the USB port and the USB controller. Ideally, the TVS diode is placed as closely as possible to the USB port to arrest the transient threat as close as possible to the source. In this case, it is great to put a zener diode across the lines of Vbus, D+ and D-: 5.1V one on the Vbus line and two 3.6V on the data lines. These diodes will prevent voltage above the value on the diode of crossing these lines and damage some connected device.","title":"Design Guidelines (ATSAMD21)"},{"location":"content/building-singlecopter/#what-i-discovered-from-my-research-on-design-guidelines","text":"I started search for boards from Adafruit and Sparkfun, which have open source stuff and had their schematics online. I managed to check this one: As is possible to see, there is no big protection on the USB. On Vbus there is a fuse to prevent over current, but there is no absolutely no protection on electrostatic discharge. Weird right? I thought so. I always thought these boards were designed having in mind the most unconscious user, but I guess I was wrong this whole time. So, despite all the protections available, it is possible to go raw and forget about that. But me, an intellectual, really need this type of protection, because why not. TL:DR you do what you want \ud83d\ude0e","title":"What I discovered from my research on design guidelines"},{"location":"content/building-singlecopter/#final-pcb","text":"","title":"Final PCB"},{"location":"content/building-singlecopter/#previous-articles","text":"Testing New Website Features and updating the MOSFET situation Choosing MOSFET according to motor specifications","title":"Previous articles"},{"location":"content/changing-website-workflow/","text":"Changing website workflow with Mkdocs How I was doing before First idea to come to my mind was to ease the process of building code . So I used Notion as a platform to write whatever I wanted, it helped me create tables, links, images... It is a very good tool! Then I would export to HTML and add to my website through a template. After that I only had to improve edges and it was good to go. I choose this way because it gave me more freedom - I could code whatever I wanted on top of the article. Code JS to do a crazy animation, I could create a button to guide you throughout a demo. At first, seems a pretty good idea, but, in the end, I was not using the freedom I once searched for. So, I still had to deal with code like HTML, which made the process a bit slow and would make friction to create something , whatever it could be. Solution? After one year of using this process I came accross something named as Mkdocs . This got my attention right away! Even thought, I had to lost a bit of freedom along the code, it would make the process so much easier (and I could show you so by writing this while using Mkdocs). It basically let's you write on markdown and then converts everything into proper code , like HTML, CSS, JS... Just one command and that's it! Easy right? Thought so \ud83d\ude0e. How to do it So, if you interest how can you do this? Well, easy for you because Mkdocs has a ton of great documentation ! My biggest challenge was to create a theme for this website using the mkdocs available tools to do so. I kept it simple, simple colors, default sizes for containers, an easy to read and open-source font ( Nunito ) and a more serious one ( Merriweather ). I also used Bulma CSS framework to facilitate the process (I tend to use bootstrap but felt like giving a chance to Bulma)! If you don't want to create a theme I suggest to use the default ones or to search in the community wiki for other themes (special mention to Material ). I droped the left column with the button to download CV and with the QR Code to add me to your contacts. Reasons for this: QR code was useless if you were on mobile, which the world is tending to. CV is important but I am not trying to sell myself but to share what I like with the world. Also got rid of the Discus chat. No one was using it (uh) and it sells people data for profit - I don't like it. Future and archive The old website still exists! I just created a new endpoint for it , some of the content is just impossible to replicate here, but almost 90% is now on markdown. From now on, the website is going to be in this design, which I hope is much comfortable than the other one. 27/09/2021","title":"Changing website workflow with Mkdocs"},{"location":"content/changing-website-workflow/#changing-website-workflow-with-mkdocs","text":"","title":"Changing website workflow with Mkdocs"},{"location":"content/changing-website-workflow/#how-i-was-doing-before","text":"First idea to come to my mind was to ease the process of building code . So I used Notion as a platform to write whatever I wanted, it helped me create tables, links, images... It is a very good tool! Then I would export to HTML and add to my website through a template. After that I only had to improve edges and it was good to go. I choose this way because it gave me more freedom - I could code whatever I wanted on top of the article. Code JS to do a crazy animation, I could create a button to guide you throughout a demo. At first, seems a pretty good idea, but, in the end, I was not using the freedom I once searched for. So, I still had to deal with code like HTML, which made the process a bit slow and would make friction to create something , whatever it could be.","title":"How I was doing before"},{"location":"content/changing-website-workflow/#solution","text":"After one year of using this process I came accross something named as Mkdocs . This got my attention right away! Even thought, I had to lost a bit of freedom along the code, it would make the process so much easier (and I could show you so by writing this while using Mkdocs). It basically let's you write on markdown and then converts everything into proper code , like HTML, CSS, JS... Just one command and that's it! Easy right? Thought so \ud83d\ude0e.","title":"Solution?"},{"location":"content/changing-website-workflow/#how-to-do-it","text":"So, if you interest how can you do this? Well, easy for you because Mkdocs has a ton of great documentation ! My biggest challenge was to create a theme for this website using the mkdocs available tools to do so. I kept it simple, simple colors, default sizes for containers, an easy to read and open-source font ( Nunito ) and a more serious one ( Merriweather ). I also used Bulma CSS framework to facilitate the process (I tend to use bootstrap but felt like giving a chance to Bulma)! If you don't want to create a theme I suggest to use the default ones or to search in the community wiki for other themes (special mention to Material ). I droped the left column with the button to download CV and with the QR Code to add me to your contacts. Reasons for this: QR code was useless if you were on mobile, which the world is tending to. CV is important but I am not trying to sell myself but to share what I like with the world. Also got rid of the Discus chat. No one was using it (uh) and it sells people data for profit - I don't like it.","title":"How to do it"},{"location":"content/changing-website-workflow/#future-and-archive","text":"The old website still exists! I just created a new endpoint for it , some of the content is just impossible to replicate here, but almost 90% is now on markdown. From now on, the website is going to be in this design, which I hope is much comfortable than the other one.","title":"Future and archive"},{"location":"content/changing-website-workflow/#27092021","text":"","title":"27/09/2021"},{"location":"content/data-line-protection/","text":"Data Line Protection using Diodes - How to protect your Microcontroller I/O Diode protection A common way to protect a Input/Output Line is to have it in between two diodes. The article from where I took the picture above, Protecting Inputs in Digital Electronics , explains really well the problem - inductive ringing (or voltage oscillations) at the input of a data line can damage a component. This way of protecting a data line is quite common in microcontroller or generic data line applications; there are even some chips that already have these two diodes ready to be used and plugged, like the BAV23S . Voltage Interval The main goal of these two diodes is to create a voltage interval in which the current is allowed to pass through and prevent voltage oscillations. Mathematically speaking, something like: V_{GND} - V_{forward} < voltage < V_{ref} + V_{forward} First, it all depends on the Diode Forward Voltage ($V_{forward}$) and from the Reference Voltage $V_{ref}$. The $V_{ref}$ depends on the type of the diode and on the specifications even between diodes from the same type. Since I already used (as an example) the chip BAV23S , let's check its datasheet. As stated above, the Forward Voltage ($V_{forward}$) is around 1.25V for the Forward Current ($I_{forward}$) of 100mA. This can be translated into - when 100mA of current pass through the diode, the voltage drop (same as the forward voltage) across the diode terminals is around 1.25V. In a hypothetic scenario, where the Reference Voltage ($V_{ref}$) is 3.3V, what would be the voltage interval? Well, if we consider the diode forward voltage ($V_{ref}$) to be 1.25V, then the interval would look like this: 0 - 1.25 < voltage < 3.3V + 1.25V - 1.25V < voltage < 4.55V This would mean that the circuit would be protected from temporary voltage spikes. The overvoltage would be absorbed by a load, in case the voltage exceeds the 4.55V. If the voltage at the input terminal is 3.3V, the voltage at the output terminal is also going to be 3.3V. But what if the voltage goes above or under the voltage interval? In case we encounter a voltage spike, the current will flow through the top diode until the $V_{ref}$ , where it is going to be absorbed, as stated previously. And, finally, if the voltage goes under the voltage interval, the current flows until the ground. This use of the diodes is actually simple, cheap and great if used with an $V_{ref}$ capable to sink the current coming from the overvoltage . In some cases, the lack of a proper load at the reference voltage, might lead to an unregulated power line. Thus, is important to limit the current going through the diodes, by increasing the resistance before them. In fact, if the line is being shared with a microcontroller, it shouldn't even go above the 10mA in most of the cases. How to decrease the voltage interval The Voltage Interval can also be easily modified by choosing another Forward Voltage ($V_{forward}$). To decrease the interval, the ideal choice is to go with Schottky Diodes , since their $V_{forward}$ is around 0.3V: 0 - 0.3 < voltage < 3.3V + 0.3V - 0.3 < voltage < 3.6V Final note: It is just not me supporting this protection , a couple of companies/manufacturers also do and recommend . Zener Diode This is also a type of diode, but has a much lower reverse voltage threshold - the inverted voltage at the terminals of the diode working in reverse bias, that allows the flow of the current. The Zener Diode can be used as an alternative to the clipping diode connected to the Reference Voltage $V_{ref}$. This way, we can avoid forwarding current to a power line (and bonus - also eases PCB routing, since it is connected to the ground). But, before we jump into the circuit, an important thing to have in mind when dealing with Zener Diodes is that if a lot of current goes through the diode, its voltage regulation fails (and it fries \ud83d\ude05). Let's take a simple example: The Input Voltage ($V_{i}$) is 15V and the Breakout Voltage ($V_{bo}$) of the Zener Diode is 4.7V, which means the voltage across the terminals of the diode should be 4.7V. Let's take a look into the simulation: It is not the expected result. Because the resistance is so small ($5\\Omega$), the current passing through the diode turns it into an unstable component. I = \\frac{V_{i} - V_{bo}}{5\\Omega} A I = \\frac{15V - 4.7V}{5\\Omega} A I = 2,06 A The theoretical current 2,06A is basically the same as the simulation, 1.92A. The decreased current results of the use of the unstable $V_{bo}$ of 5.38V, instead of the theoric 4.7V. There is not a lot of information about the simulated diode ( 1N750 ), but we know, from the datasheet, the Absolute Maximum Power Dissipation is around 500mW. This is a limit we must respect and choose a resistor according to this maximum rating. The maximum current flowing through the diode without messing up with the its normal behaviour can be calculated as: I = \\frac{500mW}{4.7V} A I = 100mA The absolute maximum current is as smaller as 100mA (not using the internal series resistor of the zener diode!). Better safe than sorry - we can choose a resistor that allows the flow of 10mA: I = \\frac{V_{i} - V_{bo}}{1000\\Omega} A I = \\frac{15V - 4.7V}{1000\\Omega} A I = 10 mA A resistor of 1k$\\Omega$ fits perfectly! Now, let's try to simulate these changes: Matches previous values! Decrease the resistance and get cooler As we have seen before, the power dissipation of the Zener Diode can be set as $P = V_{bo} * I_{r}$. If your data line doesn't need that much current, it is possible to reduce it by increasing the resistance in series. If the data line draws 10mA, the power dissipation is around 47mW. But, what if we just need 1mA? P = V_{bo} * I_{r} P = 4.7V * 0,001A P = 4.7mW By re-thinking the design, we can decrease the power dissipation of our design and turn everything more efficient! (14/05/2021)","title":"Data Line Protection using Diodes - How to protect your Microcontroller I/O"},{"location":"content/data-line-protection/#data-line-protection-using-diodes-how-to-protect-your-microcontroller-io","text":"","title":"Data Line Protection using Diodes - How to protect your Microcontroller I/O"},{"location":"content/data-line-protection/#diode-protection","text":"A common way to protect a Input/Output Line is to have it in between two diodes. The article from where I took the picture above, Protecting Inputs in Digital Electronics , explains really well the problem - inductive ringing (or voltage oscillations) at the input of a data line can damage a component. This way of protecting a data line is quite common in microcontroller or generic data line applications; there are even some chips that already have these two diodes ready to be used and plugged, like the BAV23S .","title":"Diode protection"},{"location":"content/data-line-protection/#voltage-interval","text":"The main goal of these two diodes is to create a voltage interval in which the current is allowed to pass through and prevent voltage oscillations. Mathematically speaking, something like: V_{GND} - V_{forward} < voltage < V_{ref} + V_{forward} First, it all depends on the Diode Forward Voltage ($V_{forward}$) and from the Reference Voltage $V_{ref}$. The $V_{ref}$ depends on the type of the diode and on the specifications even between diodes from the same type. Since I already used (as an example) the chip BAV23S , let's check its datasheet. As stated above, the Forward Voltage ($V_{forward}$) is around 1.25V for the Forward Current ($I_{forward}$) of 100mA. This can be translated into - when 100mA of current pass through the diode, the voltage drop (same as the forward voltage) across the diode terminals is around 1.25V. In a hypothetic scenario, where the Reference Voltage ($V_{ref}$) is 3.3V, what would be the voltage interval? Well, if we consider the diode forward voltage ($V_{ref}$) to be 1.25V, then the interval would look like this: 0 - 1.25 < voltage < 3.3V + 1.25V - 1.25V < voltage < 4.55V This would mean that the circuit would be protected from temporary voltage spikes. The overvoltage would be absorbed by a load, in case the voltage exceeds the 4.55V. If the voltage at the input terminal is 3.3V, the voltage at the output terminal is also going to be 3.3V. But what if the voltage goes above or under the voltage interval? In case we encounter a voltage spike, the current will flow through the top diode until the $V_{ref}$ , where it is going to be absorbed, as stated previously. And, finally, if the voltage goes under the voltage interval, the current flows until the ground. This use of the diodes is actually simple, cheap and great if used with an $V_{ref}$ capable to sink the current coming from the overvoltage . In some cases, the lack of a proper load at the reference voltage, might lead to an unregulated power line. Thus, is important to limit the current going through the diodes, by increasing the resistance before them. In fact, if the line is being shared with a microcontroller, it shouldn't even go above the 10mA in most of the cases.","title":"Voltage Interval"},{"location":"content/data-line-protection/#how-to-decrease-the-voltage-interval","text":"The Voltage Interval can also be easily modified by choosing another Forward Voltage ($V_{forward}$). To decrease the interval, the ideal choice is to go with Schottky Diodes , since their $V_{forward}$ is around 0.3V: 0 - 0.3 < voltage < 3.3V + 0.3V - 0.3 < voltage < 3.6V Final note: It is just not me supporting this protection , a couple of companies/manufacturers also do and recommend .","title":"How to decrease the voltage interval"},{"location":"content/data-line-protection/#zener-diode","text":"This is also a type of diode, but has a much lower reverse voltage threshold - the inverted voltage at the terminals of the diode working in reverse bias, that allows the flow of the current. The Zener Diode can be used as an alternative to the clipping diode connected to the Reference Voltage $V_{ref}$. This way, we can avoid forwarding current to a power line (and bonus - also eases PCB routing, since it is connected to the ground). But, before we jump into the circuit, an important thing to have in mind when dealing with Zener Diodes is that if a lot of current goes through the diode, its voltage regulation fails (and it fries \ud83d\ude05). Let's take a simple example: The Input Voltage ($V_{i}$) is 15V and the Breakout Voltage ($V_{bo}$) of the Zener Diode is 4.7V, which means the voltage across the terminals of the diode should be 4.7V. Let's take a look into the simulation: It is not the expected result. Because the resistance is so small ($5\\Omega$), the current passing through the diode turns it into an unstable component. I = \\frac{V_{i} - V_{bo}}{5\\Omega} A I = \\frac{15V - 4.7V}{5\\Omega} A I = 2,06 A The theoretical current 2,06A is basically the same as the simulation, 1.92A. The decreased current results of the use of the unstable $V_{bo}$ of 5.38V, instead of the theoric 4.7V. There is not a lot of information about the simulated diode ( 1N750 ), but we know, from the datasheet, the Absolute Maximum Power Dissipation is around 500mW. This is a limit we must respect and choose a resistor according to this maximum rating. The maximum current flowing through the diode without messing up with the its normal behaviour can be calculated as: I = \\frac{500mW}{4.7V} A I = 100mA The absolute maximum current is as smaller as 100mA (not using the internal series resistor of the zener diode!). Better safe than sorry - we can choose a resistor that allows the flow of 10mA: I = \\frac{V_{i} - V_{bo}}{1000\\Omega} A I = \\frac{15V - 4.7V}{1000\\Omega} A I = 10 mA A resistor of 1k$\\Omega$ fits perfectly! Now, let's try to simulate these changes: Matches previous values!","title":"Zener Diode"},{"location":"content/data-line-protection/#decrease-the-resistance-and-get-cooler","text":"As we have seen before, the power dissipation of the Zener Diode can be set as $P = V_{bo} * I_{r}$. If your data line doesn't need that much current, it is possible to reduce it by increasing the resistance in series. If the data line draws 10mA, the power dissipation is around 47mW. But, what if we just need 1mA? P = V_{bo} * I_{r} P = 4.7V * 0,001A P = 4.7mW By re-thinking the design, we can decrease the power dissipation of our design and turn everything more efficient! (14/05/2021)","title":"Decrease the resistance and get cooler"},{"location":"content/discourses-and-selected-writings/","text":"Some favourite phrases in Discourses and Selected Writings by Epictetus 1. (...) we do not abandon any discipline for despair of ever being the best in it. 2. 'Ten are stronger than one'. Yes, for what, though? For taking people captive, for killing or dragging them off, for taking away their property. For main force, yes, ten are better than one. But one person with the right judgements is superior to ten without. Numbers here are irrelevant. Put them in the balance, the person with correct ideas will outweigh all the others. 3. If you lost the capability to read, or play music, you would think it was a disaster, but you think nothing of losing the capacity to be honest, decent and civilized. Yet those other misfortunes come from some outside cause, while these are your own fault. Moreover, it is neither honorable to have those other abilities nor dishonorable to lose them, whereas it is dishonorable to lose these capacities and a misfortune for each we have only ourselves to blame. 4. Now, what does the title 'citizen' mean? In this role, a person never acts in his own interest or thinks of himself alone, but, like a hand or foot that had the sense and realized its place in the natural order, all its actions and desires aim at nothing except contributing to the common good. 5. Well, when a guide meets up with someone who is lost, ordinarily his reaction is to direct him on the right path, not mock or malign him, then turn on his heel and walk away. As for you, lead someone to the truth and you will find that he can follow. 6. Take a lyre player: he's relaxed when he performs alone, but put him in front of an audience, and it's a different story, no matter how beautiful his voice or how well he plays the instrument. Why? Because he not only wants to perform well, he wants to be well received - and the latter lies outside his control. 7. 'Please, God', we say, 'relieve me of my anxiety'. Listen, stupid, you have hands, God gave them to you himself. You might as well get on your knees and pray that your nose won't run. A better idea would be to wipe your nose and forgo the prayer. The point is, isn't there anything God gave you for your present problem? You have the gifts of courage, fortitude and endurance. With 'hands' like these, do you still need somebody to help wipe your nose? 8. 'Did no one before you', he says, 'use the words \"good\" and \"just\"? Or if he did, were we ignorant of what each of them meant - were we making empty sounds bereft of sense?' (...) What we lacked was the ability to apply them correctly. We had not yet organized them with a view to determining the class of the things each of them belongs to. You might as well put the same challenge to doctors: 'Didn't we use the words \"sick\" and \"healthy\" (...) ?' Well, we had a concept of what 'healthy' means, yes, but even now we can't agree on how to adapt it. There is one doctor who says, 'Withhold his food', while another says, 'Make him eat'. One says, 'Bleed her', another says, 'She needs a transfusion.' And the cause of this chaos is none other than out still-unrealized ability to apply the concept of 'healthy' to particular cases. 9. No one, you realize, fears Caeser himself, it is death, exile, dispossession, jail and disenfranchisement that they are afraid of. Nor is Caeser loved, unless by chance he is personally deserving; we love money, a tribuneship, a military command or consulship. But when we love, hate or fear such things, then the people who administer them are bound to become our masters. (28/12/2021)","title":"Some favourite phrases in Discourses and Selected Writings by Epictetus"},{"location":"content/discourses-and-selected-writings/#some-favourite-phrases-in-discourses-and-selected-writings-by-epictetus","text":"1. (...) we do not abandon any discipline for despair of ever being the best in it. 2. 'Ten are stronger than one'. Yes, for what, though? For taking people captive, for killing or dragging them off, for taking away their property. For main force, yes, ten are better than one. But one person with the right judgements is superior to ten without. Numbers here are irrelevant. Put them in the balance, the person with correct ideas will outweigh all the others. 3. If you lost the capability to read, or play music, you would think it was a disaster, but you think nothing of losing the capacity to be honest, decent and civilized. Yet those other misfortunes come from some outside cause, while these are your own fault. Moreover, it is neither honorable to have those other abilities nor dishonorable to lose them, whereas it is dishonorable to lose these capacities and a misfortune for each we have only ourselves to blame. 4. Now, what does the title 'citizen' mean? In this role, a person never acts in his own interest or thinks of himself alone, but, like a hand or foot that had the sense and realized its place in the natural order, all its actions and desires aim at nothing except contributing to the common good. 5. Well, when a guide meets up with someone who is lost, ordinarily his reaction is to direct him on the right path, not mock or malign him, then turn on his heel and walk away. As for you, lead someone to the truth and you will find that he can follow. 6. Take a lyre player: he's relaxed when he performs alone, but put him in front of an audience, and it's a different story, no matter how beautiful his voice or how well he plays the instrument. Why? Because he not only wants to perform well, he wants to be well received - and the latter lies outside his control. 7. 'Please, God', we say, 'relieve me of my anxiety'. Listen, stupid, you have hands, God gave them to you himself. You might as well get on your knees and pray that your nose won't run. A better idea would be to wipe your nose and forgo the prayer. The point is, isn't there anything God gave you for your present problem? You have the gifts of courage, fortitude and endurance. With 'hands' like these, do you still need somebody to help wipe your nose? 8. 'Did no one before you', he says, 'use the words \"good\" and \"just\"? Or if he did, were we ignorant of what each of them meant - were we making empty sounds bereft of sense?' (...) What we lacked was the ability to apply them correctly. We had not yet organized them with a view to determining the class of the things each of them belongs to. You might as well put the same challenge to doctors: 'Didn't we use the words \"sick\" and \"healthy\" (...) ?' Well, we had a concept of what 'healthy' means, yes, but even now we can't agree on how to adapt it. There is one doctor who says, 'Withhold his food', while another says, 'Make him eat'. One says, 'Bleed her', another says, 'She needs a transfusion.' And the cause of this chaos is none other than out still-unrealized ability to apply the concept of 'healthy' to particular cases. 9. No one, you realize, fears Caeser himself, it is death, exile, dispossession, jail and disenfranchisement that they are afraid of. Nor is Caeser loved, unless by chance he is personally deserving; we love money, a tribuneship, a military command or consulship. But when we love, hate or fear such things, then the people who administer them are bound to become our masters.","title":"Some favourite phrases in Discourses and Selected Writings by Epictetus"},{"location":"content/discourses-and-selected-writings/#28122021","text":"","title":"(28/12/2021)"},{"location":"content/diy-geocache-gps/","text":"DIY and OpenSource GeoCaching GPS 20/11/2020 I really like GeoCache but I have always thought that GPS are super expensive for something that should not cost that much money. Therefore, I came up with the idea to make one myself, trying to give it the maximum features possible that others provide while cutting the costs of the material as much as possible. The idea is to create a DIY GeoCaching GPS: With significant good measures, less than 5 meters of accuracy. Cheap and popular electronic goods Powered by a 3.7V LiPo battery. Simple to use iOS/Android App but still working without app Finally, easy to build Starting by a first system architecture In this starting phase, the ESP32 is powered by the serial connection (5V from PC) and powers the OLED panel and the GPS with 3.3V. The ESP32 is the device that draws more current, up to 150mA with Bluetooth active. The system uses: A microcontroller, the ESP32 . Very cheap and popular , with a lot of flash and RAM compared with alternatives (like PIC32 or STM32 ). Besides, it has WiFi, Bluetooth and Bluetooth Low-Energy . Perfect for this kind of project. (4\u20ac) GPS NEO-6M . Cheap and very available GPS with a accuracy of 2.5 meters horizontally. (4\u20ac) UKHAS Wiki SSD1306 OLED panel, low current draw and provides a GUI visualization. Useful if App is not installed. (4\u20ac) Some LEDs to increase user experience (<1\u20ac) Libraries Luckily, there is a ton of open source libraries out there to this kind of mcu that really makes the job easier: To play with the GPS I used TinyGPS++ . To manage SSD1306 128x64 through I2C I used Adafruit libraries - SSD1306 , BusIO and GFX Library. To deal with serial ports I used HardwareSerial . To use BLE I got the ESP32 BLE for Arduino libraries Loop In order to work, this system needs to follow some sequential loop logic. Reads GPS coordinates Measures distance between desired coordinates and actual coordinates Returns measured distance to OLED panel or app The desired coordinates are received through BLE. From the above flowchart it's possible to see 2 two main loops responsible for the behavior of the system. GPS gets values, verifies it and updates current coordinates with new ones. Following, a device is connected through BLE and sends the desired destination coordinates, ending with a measured distance function executed inside the ESP32. DIY and OpenSource GeoCaching GPS v0.2 03/12/2020 When the first results were out I could see that I had failed in what I once had assigned. The first prototype worked fine and, in the end, had a great result - it worked. Even only using longitude and latitude, the distance between two coordinates was fine and acceptable. Thing is, even if the prototype works, I can not call it a product without having a great user experience or a purpose. Bluetooth connection was fine, even though it drained a lot of current (150mA). But, what if the phone controlling the coordinates to send reaches 0% battery? The board becomes useless. So even if the software and the hardware is top-notch, it fails on delivering a reliable user-experience. To prevent this from happen I created a second version board which allows the user to manually input coordinates, change it or delete it. Also, in case the user doesn't want to use the phone, it is possible to disable Bluetooth by a switch. Some minor improvements: Every button has a LED connected in parallel, therefore, each time a button is clicked a LED blinks. The input 5V pads were changed to screw terminals, more stable. DIY and OpenSource GeoCaching GPS v0.3 17/04/2021 Although last version (v0.2) already fulfilled a lot of use cases, I completely forgot about the number 0... \ud83e\udd2f Making it useless to use, only useful to test. Also, the last version was using a pin per button (14 in total), which is something very newbie in electronics. This time, I decided to use a 4x4 matrix keyboard , using only 8 pins to 16 buttons. Each button has a RC filter, decreasing (by far) the chance of switch debouncing. Some buttons can debounce up to 20ms, so the challenge was to find a RC duo (R*C) with a time constant, at least, 4 times less. This value allows the capacitor to charge/discharge while debounce errors could occur. A value 4 times less of 20ms is 5ms, and using a 0.1uF capacitor, the resistance is about 50k ohms. \\tau = RC This value is fine because a capacitor is 98% charged at 4$\\tau$, so we can assume the logic is HIGH or LOW at that point ($t = 4\\tau$). This whole project is already fits in my new directory structure which I stated in the last post . Regarding all the information above, here is the Github repository link to this project: \ud83d\udda5 nguterresn/esp32gps_geocache","title":"DIY and OpenSource GeoCaching GPS"},{"location":"content/diy-geocache-gps/#diy-and-opensource-geocaching-gps","text":"","title":"DIY and OpenSource GeoCaching GPS"},{"location":"content/diy-geocache-gps/#starting-by-a-first-system-architecture","text":"In this starting phase, the ESP32 is powered by the serial connection (5V from PC) and powers the OLED panel and the GPS with 3.3V. The ESP32 is the device that draws more current, up to 150mA with Bluetooth active. The system uses: A microcontroller, the ESP32 . Very cheap and popular , with a lot of flash and RAM compared with alternatives (like PIC32 or STM32 ). Besides, it has WiFi, Bluetooth and Bluetooth Low-Energy . Perfect for this kind of project. (4\u20ac) GPS NEO-6M . Cheap and very available GPS with a accuracy of 2.5 meters horizontally. (4\u20ac) UKHAS Wiki SSD1306 OLED panel, low current draw and provides a GUI visualization. Useful if App is not installed. (4\u20ac) Some LEDs to increase user experience (<1\u20ac)","title":"Starting by a first system architecture"},{"location":"content/diy-geocache-gps/#libraries","text":"Luckily, there is a ton of open source libraries out there to this kind of mcu that really makes the job easier: To play with the GPS I used TinyGPS++ . To manage SSD1306 128x64 through I2C I used Adafruit libraries - SSD1306 , BusIO and GFX Library. To deal with serial ports I used HardwareSerial . To use BLE I got the ESP32 BLE for Arduino libraries","title":"Libraries"},{"location":"content/diy-geocache-gps/#loop","text":"In order to work, this system needs to follow some sequential loop logic. Reads GPS coordinates Measures distance between desired coordinates and actual coordinates Returns measured distance to OLED panel or app The desired coordinates are received through BLE. From the above flowchart it's possible to see 2 two main loops responsible for the behavior of the system. GPS gets values, verifies it and updates current coordinates with new ones. Following, a device is connected through BLE and sends the desired destination coordinates, ending with a measured distance function executed inside the ESP32.","title":"Loop"},{"location":"content/diy-geocache-gps/#diy-and-opensource-geocaching-gps-v02","text":"","title":"DIY and OpenSource GeoCaching GPS v0.2"},{"location":"content/diy-geocache-gps/#diy-and-opensource-geocaching-gps-v03","text":"","title":"DIY and OpenSource GeoCaching GPS v0.3"},{"location":"content/documentation-python-script/","text":"Using pinout Python library to create support documentation Somewhere and at some point during this month I saw this Python library called pinout. So basically it allows you to create labels for your board according to the pinout of the board. In this case the board is an image you choose and try to allocate all the labels with code (Python). https://pinout.readthedocs.io/en/latest/ So it is pretty straight forward and the library already comes with examples, so you can try your own. So why is this good? So basically I can now generate pinout labels for my boards and I hope this helps me to do not lose so much time checking the connections/type/utility of the board pins . I wish I could join this library with this other one - PCBDraw - which allows you to create more beautiful image of the more, let's say. But unfortunately, I haven't figured it out how to do so. So I took one of the SVG image generated by KiCad from a previous project and tried to play around this library. This was the result: The board image is not the best but does the job. You can see that the labels can be placed everywhere and with custom distance from the board. In the end, I think this could be a great tool to the ones I already have and should placed in the svg folder of the pcb.","title":"Using pinout Python library to create support documentation"},{"location":"content/documentation-python-script/#using-pinout-python-library-to-create-support-documentation","text":"Somewhere and at some point during this month I saw this Python library called pinout. So basically it allows you to create labels for your board according to the pinout of the board. In this case the board is an image you choose and try to allocate all the labels with code (Python). https://pinout.readthedocs.io/en/latest/ So it is pretty straight forward and the library already comes with examples, so you can try your own. So why is this good? So basically I can now generate pinout labels for my boards and I hope this helps me to do not lose so much time checking the connections/type/utility of the board pins . I wish I could join this library with this other one - PCBDraw - which allows you to create more beautiful image of the more, let's say. But unfortunately, I haven't figured it out how to do so. So I took one of the SVG image generated by KiCad from a previous project and tried to play around this library. This was the result: The board image is not the best but does the job. You can see that the labels can be placed everywhere and with custom distance from the board. In the end, I think this could be a great tool to the ones I already have and should placed in the svg folder of the pcb.","title":"Using pinout Python library to create support documentation"},{"location":"content/end-of-line-board/","text":"Board to help you test end of line on your access control system I think I've started to work on a End of Line testing board back in the summer of 2022, but never actually used it or wrote about it. Recently, I've revisited this in order to make it a releasable product. Back when I started designing this board, I wrote some documents about the End Of Line technology and uploaded it to my github, here . The image above does not mirror how the board is 100% - I've changed the front screw terminals from three 2P to one 6P, reducing the cost and the amount of components to solder. Nevertheless, you can take the 3D view of the PCB down in the README as the source of truth. So far, I believe most of the people use 2k2 as the main resistor and 1k as the secondary one, and, although the board labels state these values, you can use whatever you would like - the footprint is the same (0603). I've also used push/latch buttons to mock the behaviour of a contact sensor without taking so much space. You can argue that any slide switch would do the same here, but I think we would just end up discussing about personal preferences. I choose these ones because I do believe it is closest to a contact sensor: most of the times is closed (button is pressed) and only is open a few times (button is released). It is pretty easy to use this board for testing your access control system. As stated before, whenever the button is pressed it will have the same behaviour as a closed contact sensor , and the opposite happens when it is released. The small slider buttons can trigger a cut or a short , and it doesn't matter if the latch button is pressed or released. Each screw terminal output pair should be connected to your access control system. Just as a final note: the repository doesn't include any BOM file, but the KiCad project as all the symbols used linked with a LCSC code. So, if you are interested to order the board, and the all the respective components, it should be straightforward.","title":"End of line board"},{"location":"content/end-of-line-board/#board-to-help-you-test-end-of-line-on-your-access-control-system","text":"I think I've started to work on a End of Line testing board back in the summer of 2022, but never actually used it or wrote about it. Recently, I've revisited this in order to make it a releasable product. Back when I started designing this board, I wrote some documents about the End Of Line technology and uploaded it to my github, here . The image above does not mirror how the board is 100% - I've changed the front screw terminals from three 2P to one 6P, reducing the cost and the amount of components to solder. Nevertheless, you can take the 3D view of the PCB down in the README as the source of truth. So far, I believe most of the people use 2k2 as the main resistor and 1k as the secondary one, and, although the board labels state these values, you can use whatever you would like - the footprint is the same (0603). I've also used push/latch buttons to mock the behaviour of a contact sensor without taking so much space. You can argue that any slide switch would do the same here, but I think we would just end up discussing about personal preferences. I choose these ones because I do believe it is closest to a contact sensor: most of the times is closed (button is pressed) and only is open a few times (button is released). It is pretty easy to use this board for testing your access control system. As stated before, whenever the button is pressed it will have the same behaviour as a closed contact sensor , and the opposite happens when it is released. The small slider buttons can trigger a cut or a short , and it doesn't matter if the latch button is pressed or released. Each screw terminal output pair should be connected to your access control system. Just as a final note: the repository doesn't include any BOM file, but the KiCad project as all the symbols used linked with a LCSC code. So, if you are interested to order the board, and the all the respective components, it should be straightforward.","title":"Board to help you test end of line on your access control system"},{"location":"content/fpga-and-avalon-interfaces/","text":"FPGA and Avalon Interfaces As I said in a previous post, I have been working with the Cyclone GX Starter kit FPGA, which has come up a really nice surprise as a way of development. I mean way of development because it is very different compared to the normal way of development of embedded software I'm used to. Every manufacturer has its own IP (Intellectual Property) and, therefore, its own interface between them. Intel calls the interface Avalon which is responsible to connect the components in the Intel FPGA. Avalon interface can be divided into seven types: Avalon Streaming Interface (Avalon-ST) - unidirectional flow of data, including multiplexed streams, packets, and DSP data. Avalon Memory Mapped Interface (Avalon-MM) - address-based read/write interface typical of master\u2013slave connections. Typically components like MCUs, memories, UARTs, DMAs and timers use this kind of interface. Avalon Conduit Interface - o thers connections which do not fit in any of above. Exported conduit Avalon Tri-State Conduit Interface (Avalon-TC) - interface that supports connections to off-chip peripherals. Avalon Interrupt Interface - interface that allows components to signal events to other components. Avalon Clock Interface - interface that drives or receives clocks. Avalon Reset Interface - interface that provides reset connectivity Every type of Avalon interface is very complex and this is just a brief of what they do. Plus, a cool thing about the Avalon interface is that they are an open standard, is ok to develop and sell products based on them. So, in the image above it is possible to visualize the many types of Avalon Interfaces and its connections. The Avalon Tri-state Interface is connected to SSRAM, Flash or DDRD3 RAM and each one has it own controller. The SSRAM and the Flash have a Conduit Bridge, which allows the interface to be connected to the board GPIOs when exported in the Platform Designer. From this Cornell university ECE web page I found this image that exactly shows the relation between Avalon, Platform Designer (Qsys) and Verilog. Avalon Clock and Reset Interfaces Components of FPGA can have clock inputs or clock outputs (or even both). As an example, Intel shows a PLL core: A PLL is normally used to create new clocks in order to meet some time requirement. Having a input reset (reset) and a input clock (ref_clk), creates 1 to N clock sources. One example of the use of the PLL in the FPGA is to create a clock to meet the ADC time requirements. The FPGA clock is normally 50MHz, and the LTC2308 only works up to 40MHz on the SPI clock. So PLL is used to create a new clock source, at a frequency of 40MHz or less. Avalon Memory-Mapped Interface These ones are much more complex than clock and reset interfaces. From the previous definition of MM Interfaces, I found one that suits better in order to understand: (...) Avalon Memory-Mapped Interface is a bus-like protocol that allows two components to exchange data. One component implements a master interface that allows it to request and send data to slave components. The MM Interfaces have something called signal roles. The first signal role is the address that is used to know where to write data or to read data . Has a width between 1 and 64 bits. It's easier to understand if a master has four 32-bit addresses to select four register in slave device. Starting with a 32-bit address 0x1000_0000, to write to the most significant byte of the first register I would write to the address 0x1000_0003. Therefore each byte can be accessed choosing the corresponding address. For example, second byte of the third register can be accessed by the address 0x1000_0009. From the Avalon Interface Specifications , an example may also be: (...) For example, address = 0 selects the first word of the slave. address = 1 selects the second word of the slave. This quote confirms what I wrote above, but in a more simple and abstract way \ud83d\ude03 Although address is very important between MM Interfaces, is not required. Signal roles like readdata , write and writedata are required. Based on the minimum requirements, readdata is required for a read-only interface or write and writedata for a write-only interface. In the image above it is possible to visualize how masters and slaves work with their signal roles .","title":"FPGA and Avalon Interfaces"},{"location":"content/fpga-and-avalon-interfaces/#fpga-and-avalon-interfaces","text":"As I said in a previous post, I have been working with the Cyclone GX Starter kit FPGA, which has come up a really nice surprise as a way of development. I mean way of development because it is very different compared to the normal way of development of embedded software I'm used to. Every manufacturer has its own IP (Intellectual Property) and, therefore, its own interface between them. Intel calls the interface Avalon which is responsible to connect the components in the Intel FPGA. Avalon interface can be divided into seven types: Avalon Streaming Interface (Avalon-ST) - unidirectional flow of data, including multiplexed streams, packets, and DSP data. Avalon Memory Mapped Interface (Avalon-MM) - address-based read/write interface typical of master\u2013slave connections. Typically components like MCUs, memories, UARTs, DMAs and timers use this kind of interface. Avalon Conduit Interface - o thers connections which do not fit in any of above. Exported conduit Avalon Tri-State Conduit Interface (Avalon-TC) - interface that supports connections to off-chip peripherals. Avalon Interrupt Interface - interface that allows components to signal events to other components. Avalon Clock Interface - interface that drives or receives clocks. Avalon Reset Interface - interface that provides reset connectivity Every type of Avalon interface is very complex and this is just a brief of what they do. Plus, a cool thing about the Avalon interface is that they are an open standard, is ok to develop and sell products based on them. So, in the image above it is possible to visualize the many types of Avalon Interfaces and its connections. The Avalon Tri-state Interface is connected to SSRAM, Flash or DDRD3 RAM and each one has it own controller. The SSRAM and the Flash have a Conduit Bridge, which allows the interface to be connected to the board GPIOs when exported in the Platform Designer. From this Cornell university ECE web page I found this image that exactly shows the relation between Avalon, Platform Designer (Qsys) and Verilog.","title":"FPGA and Avalon Interfaces"},{"location":"content/fpga-and-avalon-interfaces/#avalon-clock-and-reset-interfaces","text":"Components of FPGA can have clock inputs or clock outputs (or even both). As an example, Intel shows a PLL core: A PLL is normally used to create new clocks in order to meet some time requirement. Having a input reset (reset) and a input clock (ref_clk), creates 1 to N clock sources. One example of the use of the PLL in the FPGA is to create a clock to meet the ADC time requirements. The FPGA clock is normally 50MHz, and the LTC2308 only works up to 40MHz on the SPI clock. So PLL is used to create a new clock source, at a frequency of 40MHz or less.","title":"Avalon Clock and Reset Interfaces"},{"location":"content/fpga-and-avalon-interfaces/#avalon-memory-mapped-interface","text":"These ones are much more complex than clock and reset interfaces. From the previous definition of MM Interfaces, I found one that suits better in order to understand: (...) Avalon Memory-Mapped Interface is a bus-like protocol that allows two components to exchange data. One component implements a master interface that allows it to request and send data to slave components. The MM Interfaces have something called signal roles. The first signal role is the address that is used to know where to write data or to read data . Has a width between 1 and 64 bits. It's easier to understand if a master has four 32-bit addresses to select four register in slave device. Starting with a 32-bit address 0x1000_0000, to write to the most significant byte of the first register I would write to the address 0x1000_0003. Therefore each byte can be accessed choosing the corresponding address. For example, second byte of the third register can be accessed by the address 0x1000_0009. From the Avalon Interface Specifications , an example may also be: (...) For example, address = 0 selects the first word of the slave. address = 1 selects the second word of the slave. This quote confirms what I wrote above, but in a more simple and abstract way \ud83d\ude03 Although address is very important between MM Interfaces, is not required. Signal roles like readdata , write and writedata are required. Based on the minimum requirements, readdata is required for a read-only interface or write and writedata for a write-only interface. In the image above it is possible to visualize how masters and slaves work with their signal roles .","title":"Avalon Memory-Mapped Interface"},{"location":"content/fpga-python-script/","text":"Compile, Program and Run a FPGA using Python scripts 09/02/2021 Revisited on 02/08/2022 Using an IDE is good for development, but when the work is done, there is no big reason to continue to open the IDE and click \"Compile, Program, Run...\" . So, the best solution is to run scripts and automate the process! The FPGA needs to compile , be programmed and then run the C file over Nios 2 processor . The compiling and programming can be done only using Quartus tools, but, in order to Run a C file, it is necessary to use the Nios 2 Command Shell. Therefore, compiling and programming will be done using the Quartus Tools while building and running a C file can be done using the Nios 2 Command Shell. Before starting, note that everything is done in a Windows computer. In a Linux computer the steps would be similar, yet different. All the documentation is available online. A good reference is the Quartus II Scripting Reference Manual and the Nios II Software Developer Handbook , for Quartus Tools and Nios 2 Command Shell, respectively. Quartus Tools Compile Using quartus_sh is possible to run commands using a shell, which has a very small foorprint. quartus_sh -- flow compile < top file > Running this command allows us to compile using the top file of the project. Program To program, it is not used the quartus_sh anymore but the quartus_pgm instead. quartus_pgm - l # to display the list of available hardware Note : try this command above to check if there are any USB-Blaster connected. After testing connection, try to run the following command to program the previous compiled files to the FPGA: quartus_pgm - c USB - Blaster - m jtag - o p ; < path to . sof file > If the command does not fail, the FPGA is now successfully programmed through USB-Blaster using JTAG. Nios 2 Command Shell This shell uses Windows Subsystem for Linux and, although some things are similar, others are not. Nios 2 Command Shell uses the Linux terminal instead of Windows' Power Shell, so it's possible to use Linux terminal commands like cd or make . After programming the FPGA, the system is changed - this means that the board support package (BSP) also needs to be refreshed or updated with new system parameters or characteristics. ( Check older articles about this ) Updating BSP To update the BSP the command is the following: Nios II Command Shell . bat nios2 - bsp - generate - files . exe -- bsp - dir < path_to_bsp_files > -- settings < path_to_settings . bsp > Nios II Command Shell.bat opens the Linux terminal necessary to use the followed commands, like nios2-bsp-generate-files.exe Note: if the software folder project name is adcnios the BSP directory will be adcnios_bsp . After updating the BSP is now ok to build and run the C program written. Build To build, run: Nios II Command Shell . bat make all - C < path to software project folder > The make command builds the C file and checks if there is any error! Run If there are no errors , it is safe to proceed by running: Nios II Command Shell . bat nios2 - download - g < path to . elf file > The terminal should output some text informing the processor is being programmed with the new C file and is running. Note: '-g' enables the processor to run. If the '-g' is not specified, the processor will be paused even though the code is flashed. Scripting with Python To run terminal commands using Python there are a few possibilities. The most part of developers recommend to use the subprocess library. By using this library, running a terminal command in python is as easy as: import subprocess subprocess . run ([ quartus_sh , '--flow' , 'compile' , ADC_TOP_PATH ], shell = True ) Inside [ ] is the first command in the Quartus Tools, the equivalent to: quartus_sh -- flow compile < top file > And ADC_TOP_PATH is a string variable pointing to the path of the top file of the project. By using subprocess to all of the previous commands, it is possible to get something like this: import subprocess ## QUARTUS SIDE # Compiles project compileFPGA = subprocess . run ([ QUARTUS_SH , '--flow' , 'compile' , ADC_TOP_PATH ], shell = True ) # Program FPGA programFPGA = subprocess . run ([ QUARTUS_PGM , '-c' , 'USB-Blaster' , '-m' , 'jtag' , '-o' , 'p;' + ADC_SOF ], shell = True ) ## NIOS2 SIDE # Update BSP and sent settings update_bsp = subprocess . run ([ NIOS2SHELL , 'nios2-bsp-generate-files.exe' , '--bsp-dir' , ADC_BSP , '--settings' , SETTINGS_BSP ], shell = True ) # Fix PATH problems #fix_path = subprocess.run([WSL, 'export', 'WSLENV=PATH/l:${WSLENV}'], shell = True) # Build Makefile build = subprocess . run ([ NIOS2SHELL , 'make' , 'all' , '-C' , WSL_PATH + MAKEFILE ], shell = True ) # Run run = subprocess . run ([ NIOS2SHELL , 'nios2-download' , '-g' , ADC_ELF ], shell = True ) Final Code I've made some variables in order to create an-easy-to-manage-directory-variable-group, kinda . So the final code looks something like this:","title":"Compile, Program and Run a FPGA using Python scripts"},{"location":"content/fpga-python-script/#compile-program-and-run-a-fpga-using-python-scripts","text":"","title":"Compile, Program and Run a FPGA using Python scripts"},{"location":"content/fpga-python-script/#quartus-tools","text":"","title":"Quartus Tools"},{"location":"content/fpga-python-script/#compile","text":"Using quartus_sh is possible to run commands using a shell, which has a very small foorprint. quartus_sh -- flow compile < top file > Running this command allows us to compile using the top file of the project.","title":"Compile"},{"location":"content/fpga-python-script/#program","text":"To program, it is not used the quartus_sh anymore but the quartus_pgm instead. quartus_pgm - l # to display the list of available hardware Note : try this command above to check if there are any USB-Blaster connected. After testing connection, try to run the following command to program the previous compiled files to the FPGA: quartus_pgm - c USB - Blaster - m jtag - o p ; < path to . sof file > If the command does not fail, the FPGA is now successfully programmed through USB-Blaster using JTAG.","title":"Program"},{"location":"content/fpga-python-script/#nios-2-command-shell","text":"This shell uses Windows Subsystem for Linux and, although some things are similar, others are not. Nios 2 Command Shell uses the Linux terminal instead of Windows' Power Shell, so it's possible to use Linux terminal commands like cd or make . After programming the FPGA, the system is changed - this means that the board support package (BSP) also needs to be refreshed or updated with new system parameters or characteristics. ( Check older articles about this )","title":"Nios 2 Command Shell"},{"location":"content/fpga-python-script/#updating-bsp","text":"To update the BSP the command is the following: Nios II Command Shell . bat nios2 - bsp - generate - files . exe -- bsp - dir < path_to_bsp_files > -- settings < path_to_settings . bsp > Nios II Command Shell.bat opens the Linux terminal necessary to use the followed commands, like nios2-bsp-generate-files.exe Note: if the software folder project name is adcnios the BSP directory will be adcnios_bsp . After updating the BSP is now ok to build and run the C program written.","title":"Updating BSP"},{"location":"content/fpga-python-script/#build","text":"To build, run: Nios II Command Shell . bat make all - C < path to software project folder > The make command builds the C file and checks if there is any error!","title":"Build"},{"location":"content/fpga-python-script/#run","text":"If there are no errors , it is safe to proceed by running: Nios II Command Shell . bat nios2 - download - g < path to . elf file > The terminal should output some text informing the processor is being programmed with the new C file and is running. Note: '-g' enables the processor to run. If the '-g' is not specified, the processor will be paused even though the code is flashed.","title":"Run"},{"location":"content/fpga-python-script/#scripting-with-python","text":"To run terminal commands using Python there are a few possibilities. The most part of developers recommend to use the subprocess library. By using this library, running a terminal command in python is as easy as: import subprocess subprocess . run ([ quartus_sh , '--flow' , 'compile' , ADC_TOP_PATH ], shell = True ) Inside [ ] is the first command in the Quartus Tools, the equivalent to: quartus_sh -- flow compile < top file > And ADC_TOP_PATH is a string variable pointing to the path of the top file of the project. By using subprocess to all of the previous commands, it is possible to get something like this: import subprocess ## QUARTUS SIDE # Compiles project compileFPGA = subprocess . run ([ QUARTUS_SH , '--flow' , 'compile' , ADC_TOP_PATH ], shell = True ) # Program FPGA programFPGA = subprocess . run ([ QUARTUS_PGM , '-c' , 'USB-Blaster' , '-m' , 'jtag' , '-o' , 'p;' + ADC_SOF ], shell = True ) ## NIOS2 SIDE # Update BSP and sent settings update_bsp = subprocess . run ([ NIOS2SHELL , 'nios2-bsp-generate-files.exe' , '--bsp-dir' , ADC_BSP , '--settings' , SETTINGS_BSP ], shell = True ) # Fix PATH problems #fix_path = subprocess.run([WSL, 'export', 'WSLENV=PATH/l:${WSLENV}'], shell = True) # Build Makefile build = subprocess . run ([ NIOS2SHELL , 'make' , 'all' , '-C' , WSL_PATH + MAKEFILE ], shell = True ) # Run run = subprocess . run ([ NIOS2SHELL , 'nios2-download' , '-g' , ADC_ELF ], shell = True )","title":"Scripting with Python"},{"location":"content/fpga-python-script/#final-code","text":"I've made some variables in order to create an-easy-to-manage-directory-variable-group, kinda . So the final code looks something like this:","title":"Final Code"},{"location":"content/how-datasheets-can-be-misleading/","text":"How to read a datasheet and how it can be misleading (MCP73827) I had designed a board in which a battery charger chip was used - the MCP73827 . It is a very simple chip and a typical application can be seen in the first page of the datasheet. This first circuit is not wrong, but it is - it is not ideal and it should not be used in any application. This figure led me to believe it was OK. First check of the design Fastforward to the moment I receive the final design in hands, I started to test it and plugged a LiPo 3.7V cell to it. After some checking here and there, everything looked OK. When the problem started Some time had passed and the battery was fully charged ($~4.2V$). When I turned down the input voltage, the LED, responsible to give feedback about the charging state, was still ON . Weird, right? My first thought was - something is shorted in the design. Checked again every node of the electronic circuit, nothing. The 100m Ohms resistor almost tricked me into thinking both ends were shorted, but no, nothing was shorted. Next, I checked the voltage at every critical pin of the battery charger: $V_{gs} = -2.73V$ $V_{in} = 4.2V$ $V_{mode} = 1.72V$ The transistor was letting current pass from drain, battery, to the source, chip. So, the chip was being supplied by the battery it was supposed to control the charge. Weird! How is this possible? Easy solution for someone who reads I had absolutely no idea what was the problem. The chip was working but I did not want the battery to discharge and supply the battery charger, while it was not being charged - I knew there was a problem there, just couldn't find the reason. Luckily, there are smart people in this world who are glad to help distracted people like me. I posted on reddit on why this happens, and the reason was clear - the SHDN pin is connected to $V_{in}$. So, the chip would still work as long as the voltage at the edge of SHDN was bigger than 40% of $V_{in}$. Well, as previously seen, $V_{in}$ had $4.2V$ at its terminals, causing the chip to be enabled, even when it had nothing coming from the input supply. This is not a huge problem, as the MCP73827 will enter in a low power mode if the input voltage is less than the output voltage: In the stand-alone configuration, the shutdown pin is generally tied to the input voltage. The MCP73827 will automatically enter a low power mode when the input voltage is less than the output voltage reducing the battery drain current to 8 \u03bcA, typically. The chip goes into a low power mode and it draws very low current from the battery, but the LED is still ON and draws way more current. This is something that is not ideal at all and should not have been used as a typical application ! A new typical application circuit At the middle of the datasheet, they present another typical application circuit , this time without the SHDN pin problem. By connecting the shutdown pin as depicted in Figure 6-1, the battery drain current may be further reduced. In this application, the battery drain current becomes a function of the reverse leakage current of the reverse protection diode. And just like that, the problem is solved. Further reading The use of the voltage divider on the SHDN pin is to limit the voltage on its terminals, as the pins can only deal with $V_{in} + 0.3V$. Since the SHDN is now connected before the diode, and the diode normally has a voltage droupout bigger than $0.3V$, it could easily exceed the maximum ratings. All inputs and outputs w.r.t. GND ................-0.3 to (VIN+0.3)V (13/02/2022)","title":"How to read a datasheet and how it can be misleading (MCP73827)"},{"location":"content/how-datasheets-can-be-misleading/#how-to-read-a-datasheet-and-how-it-can-be-misleading-mcp73827","text":"I had designed a board in which a battery charger chip was used - the MCP73827 . It is a very simple chip and a typical application can be seen in the first page of the datasheet. This first circuit is not wrong, but it is - it is not ideal and it should not be used in any application. This figure led me to believe it was OK.","title":"How to read a datasheet and how it can be misleading (MCP73827)"},{"location":"content/how-datasheets-can-be-misleading/#first-check-of-the-design","text":"Fastforward to the moment I receive the final design in hands, I started to test it and plugged a LiPo 3.7V cell to it. After some checking here and there, everything looked OK.","title":"First check of the design"},{"location":"content/how-datasheets-can-be-misleading/#when-the-problem-started","text":"Some time had passed and the battery was fully charged ($~4.2V$). When I turned down the input voltage, the LED, responsible to give feedback about the charging state, was still ON . Weird, right? My first thought was - something is shorted in the design. Checked again every node of the electronic circuit, nothing. The 100m Ohms resistor almost tricked me into thinking both ends were shorted, but no, nothing was shorted. Next, I checked the voltage at every critical pin of the battery charger: $V_{gs} = -2.73V$ $V_{in} = 4.2V$ $V_{mode} = 1.72V$ The transistor was letting current pass from drain, battery, to the source, chip. So, the chip was being supplied by the battery it was supposed to control the charge. Weird! How is this possible?","title":"When the problem started"},{"location":"content/how-datasheets-can-be-misleading/#easy-solution-for-someone-who-reads","text":"I had absolutely no idea what was the problem. The chip was working but I did not want the battery to discharge and supply the battery charger, while it was not being charged - I knew there was a problem there, just couldn't find the reason. Luckily, there are smart people in this world who are glad to help distracted people like me. I posted on reddit on why this happens, and the reason was clear - the SHDN pin is connected to $V_{in}$. So, the chip would still work as long as the voltage at the edge of SHDN was bigger than 40% of $V_{in}$. Well, as previously seen, $V_{in}$ had $4.2V$ at its terminals, causing the chip to be enabled, even when it had nothing coming from the input supply. This is not a huge problem, as the MCP73827 will enter in a low power mode if the input voltage is less than the output voltage: In the stand-alone configuration, the shutdown pin is generally tied to the input voltage. The MCP73827 will automatically enter a low power mode when the input voltage is less than the output voltage reducing the battery drain current to 8 \u03bcA, typically. The chip goes into a low power mode and it draws very low current from the battery, but the LED is still ON and draws way more current. This is something that is not ideal at all and should not have been used as a typical application !","title":"Easy solution for someone who reads"},{"location":"content/how-datasheets-can-be-misleading/#a-new-typical-application-circuit","text":"At the middle of the datasheet, they present another typical application circuit , this time without the SHDN pin problem. By connecting the shutdown pin as depicted in Figure 6-1, the battery drain current may be further reduced. In this application, the battery drain current becomes a function of the reverse leakage current of the reverse protection diode. And just like that, the problem is solved.","title":"A new typical application circuit"},{"location":"content/how-datasheets-can-be-misleading/#further-reading","text":"The use of the voltage divider on the SHDN pin is to limit the voltage on its terminals, as the pins can only deal with $V_{in} + 0.3V$. Since the SHDN is now connected before the diode, and the diode normally has a voltage droupout bigger than $0.3V$, it could easily exceed the maximum ratings. All inputs and outputs w.r.t. GND ................-0.3 to (VIN+0.3)V","title":"Further reading"},{"location":"content/how-datasheets-can-be-misleading/#13022022","text":"","title":"(13/02/2022)"},{"location":"content/lgvl-simulator-vscode-macos/","text":"How to simulate LGVL using SDL2 on VSCode (MacOS) Introduction I've started 2024 looking for new technologies to explore and there was one I had in mind to explore a bit, the LGVL library, a open-source graphics library for embedded systems. When I started looking into the documentation about the simulator in VSCode, I noticed there was no clear documentation on how to run the simulator on macOS. After following the first steps and triying to build the code, I end up having no success on the last. The code didn't build. In order to find what was missing on my side, I decided to run a simple SDL minimal project and noticed the following line was NOT present in the previous repository Makefile: ` sdl2-config --cflags --libs ` This line will expose the C Flags and the library path, which are necesary for a successful build of the project. -I/opt/homebrew/include/SDL2 -D_THREAD_SAFE -L/opt/homebrew/lib -lSDL2 Steps a. Install SDL2 : foo@bar:~$ brew install sdl2 b. Find SDL2 paths: foo@bar:~$ brew ls SDL2 It will print something like this: /opt/homebrew/Cellar/sdl2/2.28.5/bin/sdl2-config /opt/homebrew/Cellar/sdl2/2.28.5/include/SDL2/ ( 78 files ) /opt/homebrew/Cellar/sdl2/2.28.5/lib/libSDL2-2.0.0.dylib /opt/homebrew/Cellar/sdl2/2.28.5/lib/cmake/ ( 2 files ) /opt/homebrew/Cellar/sdl2/2.28.5/lib/pkgconfig/sdl2.pc /opt/homebrew/Cellar/sdl2/2.28.5/lib/ ( 4 other files ) /opt/homebrew/Cellar/sdl2/2.28.5/share/aclocal/sdl2.m4 c. Add the include SDL2 path to the Makefile: INC := -I./ui/simulator/inc/ -I./ -I./lvgl/ -I/opt/homebrew/Cellar/sdl2/2.28.5/include/SDL2 d. Include the SDL2 library and respective C flags, by adding sdl2-config --cflags --libs : $(BIN) : $( OBJECTS ) @mkdir -p $( BIN_DIR ) $( CC ) -o $( BIN ) $( OBJECTS ) $( LDFLAGS ) ${ LDLIBS } ` sdl2-config --cflags --libs ` e. Change the main.c include #include <SDL2/SDL.h> to #include <SDL.h> . f. Run make \ud83e\udd1d Other I've created a PR to merge this info to the main branch. There is also another PR which adds support for CMake on MacOS.","title":"Lgvl simulator vscode macos"},{"location":"content/lgvl-simulator-vscode-macos/#how-to-simulate-lgvl-using-sdl2-on-vscode-macos","text":"","title":"How to simulate LGVL using SDL2 on VSCode (MacOS)"},{"location":"content/lgvl-simulator-vscode-macos/#introduction","text":"I've started 2024 looking for new technologies to explore and there was one I had in mind to explore a bit, the LGVL library, a open-source graphics library for embedded systems. When I started looking into the documentation about the simulator in VSCode, I noticed there was no clear documentation on how to run the simulator on macOS. After following the first steps and triying to build the code, I end up having no success on the last. The code didn't build. In order to find what was missing on my side, I decided to run a simple SDL minimal project and noticed the following line was NOT present in the previous repository Makefile: ` sdl2-config --cflags --libs ` This line will expose the C Flags and the library path, which are necesary for a successful build of the project. -I/opt/homebrew/include/SDL2 -D_THREAD_SAFE -L/opt/homebrew/lib -lSDL2","title":"Introduction"},{"location":"content/lgvl-simulator-vscode-macos/#steps","text":"a. Install SDL2 : foo@bar:~$ brew install sdl2 b. Find SDL2 paths: foo@bar:~$ brew ls SDL2 It will print something like this: /opt/homebrew/Cellar/sdl2/2.28.5/bin/sdl2-config /opt/homebrew/Cellar/sdl2/2.28.5/include/SDL2/ ( 78 files ) /opt/homebrew/Cellar/sdl2/2.28.5/lib/libSDL2-2.0.0.dylib /opt/homebrew/Cellar/sdl2/2.28.5/lib/cmake/ ( 2 files ) /opt/homebrew/Cellar/sdl2/2.28.5/lib/pkgconfig/sdl2.pc /opt/homebrew/Cellar/sdl2/2.28.5/lib/ ( 4 other files ) /opt/homebrew/Cellar/sdl2/2.28.5/share/aclocal/sdl2.m4 c. Add the include SDL2 path to the Makefile: INC := -I./ui/simulator/inc/ -I./ -I./lvgl/ -I/opt/homebrew/Cellar/sdl2/2.28.5/include/SDL2 d. Include the SDL2 library and respective C flags, by adding sdl2-config --cflags --libs : $(BIN) : $( OBJECTS ) @mkdir -p $( BIN_DIR ) $( CC ) -o $( BIN ) $( OBJECTS ) $( LDFLAGS ) ${ LDLIBS } ` sdl2-config --cflags --libs ` e. Change the main.c include #include <SDL2/SDL.h> to #include <SDL.h> . f. Run make \ud83e\udd1d","title":"Steps"},{"location":"content/lgvl-simulator-vscode-macos/#other","text":"I've created a PR to merge this info to the main branch. There is also another PR which adds support for CMake on MacOS.","title":"Other"},{"location":"content/matrix-led-lol/","text":"Matrix Led telling how good you are at playing League of Legends Recently I acquired one of the matrix led panels selling on Aliexpress or Ebay and started to print some stuff. Came to my mind that some people, including myself, need some kind of memo to remind how bad (or good huh) they are at League of Legends. The idea is simple, connect the matrix led to a microcontroller, then receive some data from a script running on the computer and connected to the League of Legends API . Arduino Side From the Arduino side, it is possible to connect the matrix like this: After having the connections well established, it is time to code. The code used in this project is based on a library from this repository, named MD_Parola. Here is the code to use: MD_Parola/Parola_Scrolling.ino at main \u00b7 MajicDesigns/MD_Parol a ( github.com ). After running and testing, the matrix should print some like: \u201cHello! Enter new message?\u201d. PC Side If it runs smoothly, then everything is ready. Connect the Arduino to the PC through USB cable. You can open a serial session in TeraTerm (or similar software) and this text is what you got from the Arduino. Now, write something and press enter , the matrix will show whatever you write! If you can\u2019t find which serial port is Arduino connected to, go to Device Manager and check Ports . OK, now you are good to code in python! Code in Python If you can output whatever you write in the serial port, you can now deal with the python code which gives us the ability to know how much time was spent in the last game played, and if the game was won or lost (we know but the computer doesn't!). I\u2019m not a python developer nor a expert in any way, but I think python is so straightforward that everyone is able to understand quickly! First, you need python installed, then you need to install the riotwatcher : pip3 install riotwatcher After installing riotwatcher, install PySerial in order to control serial port: python - m pip install pyserial Having a successful installation is mandatory to execute the python code we are going to use. Run python in the terminal to check if it is installed. Then create a file and import riotwatcher and serial \u2014 this allows to check if the libraries are available to be used: from riotwatcher import LolWatcher , ApiError import serial Then run: python yourfile . py If this test is successful you are ready to make a small changes in the final code! Change Serial port (serial_port), API key (api_key), region (my_region) and summoners name (my_summonername). The program will update every 30 seconds, and, although it can be changed, you can not change it much more, there are some limitations using Riot API \u2014 100 requests every 2 min. So, using 4 requests every 2 minutes we make sure everything works fine. To change the text shown in the matrix led, change the data inside the ser.write() function, like: ser . write ( b \u201c Solobolo \u201d ) # Note that the desired type is bytes. If you are some expert in python you can add more exceptions to the code to make it more robust! Hope you have as much fun as I had during this micro-project!","title":"Matrix Led telling how good you are at playing League of Legends"},{"location":"content/matrix-led-lol/#matrix-led-telling-how-good-you-are-at-playing-league-of-legends","text":"Recently I acquired one of the matrix led panels selling on Aliexpress or Ebay and started to print some stuff. Came to my mind that some people, including myself, need some kind of memo to remind how bad (or good huh) they are at League of Legends. The idea is simple, connect the matrix led to a microcontroller, then receive some data from a script running on the computer and connected to the League of Legends API .","title":"Matrix Led telling how good you are at playing League of Legends"},{"location":"content/matrix-led-lol/#arduino-side","text":"From the Arduino side, it is possible to connect the matrix like this: After having the connections well established, it is time to code. The code used in this project is based on a library from this repository, named MD_Parola. Here is the code to use: MD_Parola/Parola_Scrolling.ino at main \u00b7 MajicDesigns/MD_Parol a ( github.com ). After running and testing, the matrix should print some like: \u201cHello! Enter new message?\u201d.","title":"Arduino Side"},{"location":"content/matrix-led-lol/#pc-side","text":"If it runs smoothly, then everything is ready. Connect the Arduino to the PC through USB cable. You can open a serial session in TeraTerm (or similar software) and this text is what you got from the Arduino. Now, write something and press enter , the matrix will show whatever you write! If you can\u2019t find which serial port is Arduino connected to, go to Device Manager and check Ports . OK, now you are good to code in python!","title":"PC Side"},{"location":"content/matrix-led-lol/#code-in-python","text":"If you can output whatever you write in the serial port, you can now deal with the python code which gives us the ability to know how much time was spent in the last game played, and if the game was won or lost (we know but the computer doesn't!). I\u2019m not a python developer nor a expert in any way, but I think python is so straightforward that everyone is able to understand quickly! First, you need python installed, then you need to install the riotwatcher : pip3 install riotwatcher After installing riotwatcher, install PySerial in order to control serial port: python - m pip install pyserial Having a successful installation is mandatory to execute the python code we are going to use. Run python in the terminal to check if it is installed. Then create a file and import riotwatcher and serial \u2014 this allows to check if the libraries are available to be used: from riotwatcher import LolWatcher , ApiError import serial Then run: python yourfile . py If this test is successful you are ready to make a small changes in the final code! Change Serial port (serial_port), API key (api_key), region (my_region) and summoners name (my_summonername). The program will update every 30 seconds, and, although it can be changed, you can not change it much more, there are some limitations using Riot API \u2014 100 requests every 2 min. So, using 4 requests every 2 minutes we make sure everything works fine. To change the text shown in the matrix led, change the data inside the ser.write() function, like: ser . write ( b \u201c Solobolo \u201d ) # Note that the desired type is bytes. If you are some expert in python you can add more exceptions to the code to make it more robust! Hope you have as much fun as I had during this micro-project!","title":"Code in Python"},{"location":"content/motor-mosfet-research/","text":"Choosing MOSFET according to motor specifications I want to test my 8520 3.7V coreless motor and see how much current it draws from a LiPo battery inside a motor driver made for drone usage. To do this I need to pick a MOSFET that enables the best switching to control de motor through PWM. Motor Specifications A good starting point is to define the specifications of the motor; Works at 3.7 V Load current at 2A Stall current is around 5A $V_{DD},V_{GS}, I_{D}$ From these values is easy to say that $V_{DD} > 3.7V$ (Voltage from power supply) and $I_d > 5A$ (current at drain). As a rule of thumb and to aim flexibility within the system , let's double these values, so let's find a MOSFET that $V_{DD} > 7V$ e $I_d > 10A$ Note that $V_{DS}$ should be as low as possible! The PWM outputs 5V using Arduino Uno to control the MOSFET gate but I would also like to use a 3.3V output PWM to be able to use other microcontrollers. Since the motors are powered by a 3.7V LiPo battery, it would make sense to use an LDO to 3.3V and then power whatever the controller it is used. Therefore, this is important to know the minimum value of $V_{GS}$ at which the MOSFET should be turned on. At $V_{DD} = 4.2V$ (maximum voltage within the motors terminals) and $I_d = 5A$, the voltage at which the MOSFET goes ON (threshold) should be $V_{GS(th)} < 3.3V$. Considering that should exist some voltage dropout a good value for the threshold would be around $V_{GS(th)} < 2.5V$. Power dissipation and charge Another specification to have in count when choosing a MOSFET is the resistance between drain and source $R_{DS}$. This value is related directly to the power dissipation of the MOSFET, thus the lower the better! To calculate the power loss of the MOSFET is necessary to know the value of $V_{DS}$ and the $R_{DSon}$: P_{loss} = R_{DSon} * I_d^2 The MOSFET works as a capacitor that needs to charge and discharge in order to turn ON and OFF. As it behaviours as a capacitor, it has a charge time. The gate charge is the amount of charge the MOSFET needs to be turned ON or OFF and the charge time is the time it takes to do so. The lower the charging time, the better, since it switches better between ON and OFF states. Gate drive current The amount of current provided to the gate of the MOSFET sets how much time the MOSFET needs to be fully ON. Therefore, depending on the PWM frequency available, it is possible to calculate and choose a rise/fall time for the MOSFET, and then the current provided to the gate. Lets start with a 20kHz PWM frequency since is the most recommended for this kind of motor. If frequency is $f = 20kHz$ then $T = 50 us$, for the minimum duty cycle of 1%, $T_{1\\%} = 500ns$, therefore the rise/fall time must be less than 500ns, $t_r + t_f < 500ns$. According to these results, the chosen MOSFET should be able to provide: t_r + t_f < 500ns Now to calculate the current according to the fall and rise time values: \\frac{Q_g}{t} Qg is the amount of charge on the gate necessary to change the state of the MOSFET, and t is the time of rise/fall. Considering the maximum amount of current provided by the microcontroller from a pin $Ip < 20 mA$, it is possible to have a desired charge amount at the gate: \\frac{Q_g}{t} < 20mA Q_g < 20mA * t The trade off Although less $Qg$ and less Rds is better, there is a trade-off between them. Normally, to decrease one, the other increases, so it really depends on the system. In this system I would focus on getting the lowest Rds possible, in order to reduce the power loss. Choosing MOSFET The one whose actually seem the best for me was the IRLZ44N , and since I can buy it near the place I live, I will choose it as the MOSFET of this system. Apart from that, its package is also great to testing! The Rds and the voltage drop along Vds is also very low . These values are great! I'm just worried about the high charge gate , this could be a problem to high frequency motors . Building the circuit To simplify the explanation I created a schematic with a bunch of information, everything very short. Gate Resistor The MOSFET needs two resistors connected to the gate. The first resistor, the gate resistor is very important! It protects the MOSFET gate and the signal provider (PWM pin) from getting seriously damaged. Because the MOSFET behaviours as a capacitor, at charging (to turn ON), it is pulling current from the controller. Well, we can check the worst scenario possible by using the total gate charge and its rising time: I_{max}=\\frac{Q_g}{t_r} =\\frac{48}{84}=0.57A If the MOSFET pulls 0.57A from the microcontroller, it will, for sure, damage it. It depends from MCU to MCU, but, for example, Arduino Uno pins can pull up to 40mA of current. To be safe, lets consider 20mA ! Measuring the rising time in the worst scenario.... t_r =\\frac{48nC}{0.02A}= 2.4us For a frequency of 4kHz (250us), considering falling time the same as the rising time, on transitions (ON to OFF or OFF to ON), the MOSFET spends: tran_{4kHz} = \\frac{2.4us}{125us}=1.92\\% Approximately 2%, which is OK and reasonable for this frequency. However, this is not perfect. As seen before, t < 1% of the duty cycle time. In other hand, if we try to calculate to the recommended 20kHz (50us) frequency: tran_{20kHz} = \\frac{2.4us}{25us}=9.6\\% Almost 10% of the time would be spend on turning ON and OFF the MOSFET, this is terrible! For now lets stay with the frequency of 4kHz. Pull-down resistor This resistor is responsible by forcing the MOSFET to turn OFF when gate is floating. It also affects the falling time of the MOSFET. Apart from this, there is a trade off. If we look closely, the two resistors form a voltage divider, the voltage in the Pull-down resistor will always be higher, as long as it is bigger than the gate resistor (as it is, normally!). We can calculate the voltage drop and check how much voltage goes through the gate of the MOSFET. Lets consider gate resistor as Rg and pull-down resistor as Rpd : V_g = \\frac{R_{pd}}{R_{pd}+R_g}*Vin = \\frac{10000}{10220}*5V = 4.89V If the MOSFET has 4.98V at his gate , it means that there is a 11mV voltage drop along the gate resistor. It is possible to reduce this value by increasing the value of the pull-down resistor, however this will increase MOSFET's fall time. For a threshold (max) of 2V, it's fine to have 4.89V at the gate as long as it allows a current higher than 5A (stall current of the motor) According to the graph, with a voltage between gate and source close to 5V is totally possible to reach 5A at drain with less than 0.2V of voltage drop from drain to source. Zener Diode In order to prevent higher voltages than 5V at the MOSFET gate, a Zener diode of 5.1V is used connected between gate and ground. Simple and cool concept! Motor-related Protections In order to protect the system, a schotty diode and a capacitor are placed in parallel with the motor. The schotty diode should be a fast diode, with low dropout voltage and a forward current bigger than the normal 2A (drawn by the motor). Final Thoughts I think this is a good place to start. In a few days I will test this circuit and change some values if I don't like them. I will report it later \ud83d\ude37","title":"Choosing MOSFET according to motor specifications"},{"location":"content/motor-mosfet-research/#choosing-mosfet-according-to-motor-specifications","text":"I want to test my 8520 3.7V coreless motor and see how much current it draws from a LiPo battery inside a motor driver made for drone usage. To do this I need to pick a MOSFET that enables the best switching to control de motor through PWM.","title":"Choosing MOSFET according to motor specifications"},{"location":"content/motor-mosfet-research/#motor-specifications","text":"A good starting point is to define the specifications of the motor; Works at 3.7 V Load current at 2A Stall current is around 5A","title":"Motor Specifications"},{"location":"content/motor-mosfet-research/#v_ddv_gs-i_d","text":"From these values is easy to say that $V_{DD} > 3.7V$ (Voltage from power supply) and $I_d > 5A$ (current at drain). As a rule of thumb and to aim flexibility within the system , let's double these values, so let's find a MOSFET that $V_{DD} > 7V$ e $I_d > 10A$ Note that $V_{DS}$ should be as low as possible! The PWM outputs 5V using Arduino Uno to control the MOSFET gate but I would also like to use a 3.3V output PWM to be able to use other microcontrollers. Since the motors are powered by a 3.7V LiPo battery, it would make sense to use an LDO to 3.3V and then power whatever the controller it is used. Therefore, this is important to know the minimum value of $V_{GS}$ at which the MOSFET should be turned on. At $V_{DD} = 4.2V$ (maximum voltage within the motors terminals) and $I_d = 5A$, the voltage at which the MOSFET goes ON (threshold) should be $V_{GS(th)} < 3.3V$. Considering that should exist some voltage dropout a good value for the threshold would be around $V_{GS(th)} < 2.5V$.","title":"$V_{DD},V_{GS}, I_{D}$"},{"location":"content/motor-mosfet-research/#power-dissipation-and-charge","text":"Another specification to have in count when choosing a MOSFET is the resistance between drain and source $R_{DS}$. This value is related directly to the power dissipation of the MOSFET, thus the lower the better! To calculate the power loss of the MOSFET is necessary to know the value of $V_{DS}$ and the $R_{DSon}$: P_{loss} = R_{DSon} * I_d^2 The MOSFET works as a capacitor that needs to charge and discharge in order to turn ON and OFF. As it behaviours as a capacitor, it has a charge time. The gate charge is the amount of charge the MOSFET needs to be turned ON or OFF and the charge time is the time it takes to do so. The lower the charging time, the better, since it switches better between ON and OFF states.","title":"Power dissipation and charge"},{"location":"content/motor-mosfet-research/#gate-drive-current","text":"The amount of current provided to the gate of the MOSFET sets how much time the MOSFET needs to be fully ON. Therefore, depending on the PWM frequency available, it is possible to calculate and choose a rise/fall time for the MOSFET, and then the current provided to the gate. Lets start with a 20kHz PWM frequency since is the most recommended for this kind of motor. If frequency is $f = 20kHz$ then $T = 50 us$, for the minimum duty cycle of 1%, $T_{1\\%} = 500ns$, therefore the rise/fall time must be less than 500ns, $t_r + t_f < 500ns$. According to these results, the chosen MOSFET should be able to provide: t_r + t_f < 500ns Now to calculate the current according to the fall and rise time values: \\frac{Q_g}{t} Qg is the amount of charge on the gate necessary to change the state of the MOSFET, and t is the time of rise/fall. Considering the maximum amount of current provided by the microcontroller from a pin $Ip < 20 mA$, it is possible to have a desired charge amount at the gate: \\frac{Q_g}{t} < 20mA Q_g < 20mA * t","title":"Gate drive current"},{"location":"content/motor-mosfet-research/#the-trade-off","text":"Although less $Qg$ and less Rds is better, there is a trade-off between them. Normally, to decrease one, the other increases, so it really depends on the system. In this system I would focus on getting the lowest Rds possible, in order to reduce the power loss. Choosing MOSFET The one whose actually seem the best for me was the IRLZ44N , and since I can buy it near the place I live, I will choose it as the MOSFET of this system. Apart from that, its package is also great to testing! The Rds and the voltage drop along Vds is also very low . These values are great! I'm just worried about the high charge gate , this could be a problem to high frequency motors .","title":"The trade off"},{"location":"content/motor-mosfet-research/#building-the-circuit","text":"To simplify the explanation I created a schematic with a bunch of information, everything very short.","title":"Building the circuit"},{"location":"content/motor-mosfet-research/#gate-resistor","text":"The MOSFET needs two resistors connected to the gate. The first resistor, the gate resistor is very important! It protects the MOSFET gate and the signal provider (PWM pin) from getting seriously damaged. Because the MOSFET behaviours as a capacitor, at charging (to turn ON), it is pulling current from the controller. Well, we can check the worst scenario possible by using the total gate charge and its rising time: I_{max}=\\frac{Q_g}{t_r} =\\frac{48}{84}=0.57A If the MOSFET pulls 0.57A from the microcontroller, it will, for sure, damage it. It depends from MCU to MCU, but, for example, Arduino Uno pins can pull up to 40mA of current. To be safe, lets consider 20mA ! Measuring the rising time in the worst scenario.... t_r =\\frac{48nC}{0.02A}= 2.4us For a frequency of 4kHz (250us), considering falling time the same as the rising time, on transitions (ON to OFF or OFF to ON), the MOSFET spends: tran_{4kHz} = \\frac{2.4us}{125us}=1.92\\% Approximately 2%, which is OK and reasonable for this frequency. However, this is not perfect. As seen before, t < 1% of the duty cycle time. In other hand, if we try to calculate to the recommended 20kHz (50us) frequency: tran_{20kHz} = \\frac{2.4us}{25us}=9.6\\% Almost 10% of the time would be spend on turning ON and OFF the MOSFET, this is terrible! For now lets stay with the frequency of 4kHz.","title":"Gate Resistor"},{"location":"content/motor-mosfet-research/#pull-down-resistor","text":"This resistor is responsible by forcing the MOSFET to turn OFF when gate is floating. It also affects the falling time of the MOSFET. Apart from this, there is a trade off. If we look closely, the two resistors form a voltage divider, the voltage in the Pull-down resistor will always be higher, as long as it is bigger than the gate resistor (as it is, normally!). We can calculate the voltage drop and check how much voltage goes through the gate of the MOSFET. Lets consider gate resistor as Rg and pull-down resistor as Rpd : V_g = \\frac{R_{pd}}{R_{pd}+R_g}*Vin = \\frac{10000}{10220}*5V = 4.89V If the MOSFET has 4.98V at his gate , it means that there is a 11mV voltage drop along the gate resistor. It is possible to reduce this value by increasing the value of the pull-down resistor, however this will increase MOSFET's fall time. For a threshold (max) of 2V, it's fine to have 4.89V at the gate as long as it allows a current higher than 5A (stall current of the motor) According to the graph, with a voltage between gate and source close to 5V is totally possible to reach 5A at drain with less than 0.2V of voltage drop from drain to source.","title":"Pull-down resistor"},{"location":"content/motor-mosfet-research/#zener-diode","text":"In order to prevent higher voltages than 5V at the MOSFET gate, a Zener diode of 5.1V is used connected between gate and ground. Simple and cool concept!","title":"Zener Diode"},{"location":"content/motor-mosfet-research/#motor-related-protections","text":"In order to protect the system, a schotty diode and a capacitor are placed in parallel with the motor. The schotty diode should be a fast diode, with low dropout voltage and a forward current bigger than the normal 2A (drawn by the motor).","title":"Motor-related Protections"},{"location":"content/motor-mosfet-research/#final-thoughts","text":"I think this is a good place to start. In a few days I will test this circuit and change some values if I don't like them. I will report it later \ud83d\ude37","title":"Final Thoughts"},{"location":"content/psu-ka3005p-due/","text":"Control the ka3005p power supply with an Arduino Due There a ton of repositories available online on how to control the ka3005p power supply according to its command sheet. There none on how to control it using an embedded device, such as a microcontroller. You can take a look into the library here . The first requirement is that the device must be able to be an USB Host. The ka3005p power supply acts as an USB device and needs to be managed by an host. The Arduino Due supports USB host capabilities. It is not possible to use other popular Arduino Boards, such as Uno or Mega to control the power supply. The USB Host Shield 2.0 is a very interesting project and was from where I took all the code I needed to make this project happen. My library is basically a modified USB CDC library and a wrapper with all the commands that the power supply expects. I've used a software on a computer to read and identify the USB characteristics comming from the power supply. This gave me the information I needed to change the ConfigDescParser method (inside cdc.cpp ) and add the const USB_CLASS_CDC_DATA as part of it. Here is an example on how to use the library: #include \"psu.h\" // #define USE_SERIAL #ifdef USE_SERIAL PSU psu ; #else PSU psu ( & Serial ); #endif void setup () { cpu_irq_enable (); } void loop () { psu . task (); uint8_t usb_state = psu . getUsbTaskState (); if ( usb_state == USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ) { // ka3005p not connected. return ; } else if ( usb_state == USB_STATE_RUNNING ) { // USB Enumeration is done, do something. psu . setCurrent ( CHANNEL_1 , 2.00 ); } } If your using platformIO, check the settings you need to add here .","title":"Psu ka3005p due"},{"location":"content/psu-ka3005p-due/#control-the-ka3005p-power-supply-with-an-arduino-due","text":"There a ton of repositories available online on how to control the ka3005p power supply according to its command sheet. There none on how to control it using an embedded device, such as a microcontroller. You can take a look into the library here . The first requirement is that the device must be able to be an USB Host. The ka3005p power supply acts as an USB device and needs to be managed by an host. The Arduino Due supports USB host capabilities. It is not possible to use other popular Arduino Boards, such as Uno or Mega to control the power supply. The USB Host Shield 2.0 is a very interesting project and was from where I took all the code I needed to make this project happen. My library is basically a modified USB CDC library and a wrapper with all the commands that the power supply expects. I've used a software on a computer to read and identify the USB characteristics comming from the power supply. This gave me the information I needed to change the ConfigDescParser method (inside cdc.cpp ) and add the const USB_CLASS_CDC_DATA as part of it. Here is an example on how to use the library: #include \"psu.h\" // #define USE_SERIAL #ifdef USE_SERIAL PSU psu ; #else PSU psu ( & Serial ); #endif void setup () { cpu_irq_enable (); } void loop () { psu . task (); uint8_t usb_state = psu . getUsbTaskState (); if ( usb_state == USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ) { // ka3005p not connected. return ; } else if ( usb_state == USB_STATE_RUNNING ) { // USB Enumeration is done, do something. psu . setCurrent ( CHANNEL_1 , 2.00 ); } } If your using platformIO, check the settings you need to add here .","title":"Control the ka3005p power supply with an Arduino Due"},{"location":"content/sensor-monitoring-fpga-adc-ltc2308-eclipse/","text":"Sensor Monitoring using FPGA connected to ADC (LTC2308) - Eclipse Side From the Eclipse side... From this side, the development is done in C. In order to make this possible, there is something named Hardware Abstraction Layer (HAL), that is basically a driver interface between the software and the hardware. For each Nios 2 implementation there is a Board Support Package (BSP) created, and, inside BSP, there is the HAL libraries. HAL Layers When writing code (C), it is possible to choose between the HAL API or the C stantard library available. The devices drivers are something more low-level and very different from the application side. The application has, for example, the main() routine. The drivers are responsible for making device resources available to application developers, as stated in Nios II Software Developer Handbook . ADC SPI interface only works up to 40MHz , therefore PLL is used to create a new clock frequency (40MHz). SPI signal is delayed through the Level Shift but it is fixed in the PLL. This is the code I've used for reading the ADC values and measuring the time between readings. #include <stdio.h> #include <io.h> #include <unistd.h> #include <sys/alt_alarm.h> #include <sys/alt_timestamp.h> #include \"system.h\" #include \"altera_avalon_pio_regs.h\" #define MILI 1000 #define MICRO 1000000 // Write #define WRITE_REG_START_CH 0 #define WRITE_REG_MEASURE_NUM 1 // Read #define READ_REG_MEASURE_DONE 0 #define READ_REG_ADC_VALUE 1 unsigned int time1 ; unsigned int time2 ; int main () { int ch ; const int nReadNum = 1024 ; // max 1024 int i , Value , nIndex = 0 ; printf ( \"ADC Test \\r\\n \" ); FILE * fp ; fp = fopen ( \"/dev/uart_0\" , \"r++\" ); if ( fp ) printf ( \"fp opens! \\r\\n \" ); else printf ( \"Error opening the UART!\" ); if ( alt_timestamp_start () < 0 ) { printf ( \"No timestamp device available \\n \" ); } else { time1 = alt_timestamp (); usleep ( 1000000 ); time2 = alt_timestamp (); double f = ( double )( time2 - time1 ) / alt_timestamp_freq (); printf ( \"Measurement time: %f at frequency of %u \\r\\n \" , f , alt_timestamp_freq ()); } while ( 1 ){ //Read adc channel from switch value ch = IORD_ALTERA_AVALON_PIO_DATA ( SW_BASE ) & 0x0F ; printf ( \"======================= %d, ch=%d \\r\\n \" , nIndex ++ , ch ); //Set measure number for ADC to convert //This write is done with 4 bytes offset //#define ADC_LTC2308_0_BASE 0x41020 + 0x04(1word 32 bit) = 0x41024 IOWR ( ADC_LTC2308_0_BASE , WRITE_REG_MEASURE_NUM , nReadNum ); //Start measure //Writes 1 into base address //#define ADC_LTC2308_0_BASE 0x41020 IOWR ( ADC_LTC2308_0_BASE , WRITE_REG_START_CH , ( ch << 1 ) | 0x00 ); IOWR ( ADC_LTC2308_0_BASE , WRITE_REG_START_CH , ( ch << 1 ) | 0x01 ); IOWR ( ADC_LTC2308_0_BASE , WRITE_REG_START_CH , ( ch << 1 ) | 0x00 ); //starts timer time1 = alt_timestamp (); // wait measure done // wait until it receives a one while (( IORD ( ADC_LTC2308_0_BASE , READ_REG_MEASURE_DONE ) & 0x01 ) == 0x00 ); time2 = alt_timestamp (); double f = ( double )( time2 - time1 ) / alt_timestamp_freq (); //Change MILI or MICRO f = f * MICRO ; printf ( \"Measurement time: %f at frequency of %u \\r\\n \" , f , alt_timestamp_freq ()); //From -> IOWR(ADC_LTC2308_0_BASE, WRITE_REG_MEASURE_NUM, nReadNum); //ADC measures are stored in a FIFO nReadNum times for ( i = 0 ; i < nReadNum ; i ++ ) { Value = IORD ( ADC_LTC2308_0_BASE , READ_REG_ADC_VALUE ); printf ( \"CH%d=%.2fV (%d) \\r\\n \" , ch , ( float ) Value / 1000.0 , Value ); //fprintf(fp,\"CH%d=%.2fV (%d)\\r\\n\", ch, (float)Value/1000.0, Value); fprintf ( fp , \"%d \\r\\n \" , Value ); IOWR_ALTERA_AVALON_PIO_DATA ( LED_R_BASE , ( Value / 500 )); } usleep ( 1000 * 1000 ); } } Is worth mentioning that, in order to use the alt_timestamp it is necessary to add a Timer Interval IP core to the system in the Platform Designer . Choose a high timeout time so it doesn't interrupt much while CPU is executing (e.g. 1s). Also, when alt_timestamp is initiated, a second is measured and its normal that a second using usleep() is higher than the actual time passing. The usleep() function guarantees that the delay happens but does not guarantee that the delay is not higher than it was supposed to be.","title":"Sensor Monitoring using FPGA connected to ADC (LTC2308) - Eclipse Side"},{"location":"content/sensor-monitoring-fpga-adc-ltc2308-eclipse/#sensor-monitoring-using-fpga-connected-to-adc-ltc2308-eclipse-side","text":"","title":"Sensor Monitoring using FPGA connected to ADC (LTC2308) - Eclipse Side"},{"location":"content/sensor-monitoring-fpga-adc-ltc2308-eclipse/#from-the-eclipse-side","text":"From this side, the development is done in C. In order to make this possible, there is something named Hardware Abstraction Layer (HAL), that is basically a driver interface between the software and the hardware. For each Nios 2 implementation there is a Board Support Package (BSP) created, and, inside BSP, there is the HAL libraries. HAL Layers When writing code (C), it is possible to choose between the HAL API or the C stantard library available. The devices drivers are something more low-level and very different from the application side. The application has, for example, the main() routine. The drivers are responsible for making device resources available to application developers, as stated in Nios II Software Developer Handbook . ADC SPI interface only works up to 40MHz , therefore PLL is used to create a new clock frequency (40MHz). SPI signal is delayed through the Level Shift but it is fixed in the PLL. This is the code I've used for reading the ADC values and measuring the time between readings. #include <stdio.h> #include <io.h> #include <unistd.h> #include <sys/alt_alarm.h> #include <sys/alt_timestamp.h> #include \"system.h\" #include \"altera_avalon_pio_regs.h\" #define MILI 1000 #define MICRO 1000000 // Write #define WRITE_REG_START_CH 0 #define WRITE_REG_MEASURE_NUM 1 // Read #define READ_REG_MEASURE_DONE 0 #define READ_REG_ADC_VALUE 1 unsigned int time1 ; unsigned int time2 ; int main () { int ch ; const int nReadNum = 1024 ; // max 1024 int i , Value , nIndex = 0 ; printf ( \"ADC Test \\r\\n \" ); FILE * fp ; fp = fopen ( \"/dev/uart_0\" , \"r++\" ); if ( fp ) printf ( \"fp opens! \\r\\n \" ); else printf ( \"Error opening the UART!\" ); if ( alt_timestamp_start () < 0 ) { printf ( \"No timestamp device available \\n \" ); } else { time1 = alt_timestamp (); usleep ( 1000000 ); time2 = alt_timestamp (); double f = ( double )( time2 - time1 ) / alt_timestamp_freq (); printf ( \"Measurement time: %f at frequency of %u \\r\\n \" , f , alt_timestamp_freq ()); } while ( 1 ){ //Read adc channel from switch value ch = IORD_ALTERA_AVALON_PIO_DATA ( SW_BASE ) & 0x0F ; printf ( \"======================= %d, ch=%d \\r\\n \" , nIndex ++ , ch ); //Set measure number for ADC to convert //This write is done with 4 bytes offset //#define ADC_LTC2308_0_BASE 0x41020 + 0x04(1word 32 bit) = 0x41024 IOWR ( ADC_LTC2308_0_BASE , WRITE_REG_MEASURE_NUM , nReadNum ); //Start measure //Writes 1 into base address //#define ADC_LTC2308_0_BASE 0x41020 IOWR ( ADC_LTC2308_0_BASE , WRITE_REG_START_CH , ( ch << 1 ) | 0x00 ); IOWR ( ADC_LTC2308_0_BASE , WRITE_REG_START_CH , ( ch << 1 ) | 0x01 ); IOWR ( ADC_LTC2308_0_BASE , WRITE_REG_START_CH , ( ch << 1 ) | 0x00 ); //starts timer time1 = alt_timestamp (); // wait measure done // wait until it receives a one while (( IORD ( ADC_LTC2308_0_BASE , READ_REG_MEASURE_DONE ) & 0x01 ) == 0x00 ); time2 = alt_timestamp (); double f = ( double )( time2 - time1 ) / alt_timestamp_freq (); //Change MILI or MICRO f = f * MICRO ; printf ( \"Measurement time: %f at frequency of %u \\r\\n \" , f , alt_timestamp_freq ()); //From -> IOWR(ADC_LTC2308_0_BASE, WRITE_REG_MEASURE_NUM, nReadNum); //ADC measures are stored in a FIFO nReadNum times for ( i = 0 ; i < nReadNum ; i ++ ) { Value = IORD ( ADC_LTC2308_0_BASE , READ_REG_ADC_VALUE ); printf ( \"CH%d=%.2fV (%d) \\r\\n \" , ch , ( float ) Value / 1000.0 , Value ); //fprintf(fp,\"CH%d=%.2fV (%d)\\r\\n\", ch, (float)Value/1000.0, Value); fprintf ( fp , \"%d \\r\\n \" , Value ); IOWR_ALTERA_AVALON_PIO_DATA ( LED_R_BASE , ( Value / 500 )); } usleep ( 1000 * 1000 ); } } Is worth mentioning that, in order to use the alt_timestamp it is necessary to add a Timer Interval IP core to the system in the Platform Designer . Choose a high timeout time so it doesn't interrupt much while CPU is executing (e.g. 1s). Also, when alt_timestamp is initiated, a second is measured and its normal that a second using usleep() is higher than the actual time passing. The usleep() function guarantees that the delay happens but does not guarantee that the delay is not higher than it was supposed to be.","title":"From the Eclipse side..."},{"location":"content/sensor-monitoring-fpga-adc-ltc2308/","text":"Sensor Monitoring using FPGA connected to ADC (LTC2308) - Quartus Side (Or how to use the Cyclone V board's ADC - LTC2308) First of all... The goal is to use the ADC in the Cyclone V dev board using Quartus and Eclipse as software. In order to start using the ADC, first, it is necessary to understand something about ADCs... In that case, let's start from the beginning. Analog to Digital Converter ADC stands for Analog-to-Digital Converter and converts analog signals (\"our world values\", like voltage) into digital values (\"computer world values\", like binary values). So, imagine that the analog signal is like a wave signal and the ADC needs to convert it, as precise as possible, to be readable at the microcontroller. Since the microcontroller only reads digital values, the ADC has the job to convert the signal from analog to digital and send it to the microcontroller, in order to be used in any kind of task. Image from this site But how does it happen? For each period, the signal is divided into some samples and within each sample there is a resolution. Let me explain... The ADC needs to convert , and so, in other words, needs to \"redraw\" the signal, as precise as possible. Therefore, to \"redraw\" the signal, the ADC needs to choose a couple of points within the signal to start drawing the new digital signal. Sample rate To calculate the sample rate : f_{s}=\\frac{1}{T} If $f_{s}$ is the sample rate , meaning the sample frequency , the period $T$ is the period of an individual sample. In the image above, the period in which each sample triggers takes 0.05 seconds, or 50 milliseconds. Then $f_{s}$ is 20 Samples per second (S/s). This value feels small for a sample rate, but the original signal has a frequency of 1Hz, meaning the sample rate is 20 times bigger than the original signal, providing a acceptable reconstruction of the analog signal. A rule to follow on this matter is the Nyquist Theorem. According to this theorem, the sample rate needs to be, at least, two times bigger than the original analog signal. f_{Nyquist} \\geq 2 \\cdot f_{OriginalSignal} Therefore, as stated before, the Nyquist Theorem and the image above, conclude that a higher sample rate allows the analog signal to be reconstructed into a digital signal in a better way. Resolution Resolution is about precision. The bigger the resolution, the higher the precision. This is very important in very critical sensors, used in industry or automotive fields, but it is not a big deal in hobby usage. In short, the resolution is viewed as steps that is shown when a signal is being reconstructed. Image from this site To calculate the precision in terms of voltage, it is necessary to know the reference voltage and the resolution, then: Step(V) = \\frac{V_{reference}}{2^{Resolution}} The Cyclone 5 board has Voltage Reference of 4.096V and the ADC has a 12-bit resolution. Then, the Step voltage is about 1mV. ADC LTC2308 Now that theory about ADCs is revisited, is possible to go deeper and analyse an ADC datasheet. The LTC2308 is a 500kSps/12 bit ADC, which means that has a sample rate of 500 000 Samples per second with a resolution of 12-bit(!). This is amazing compared to the Arduino Uno (atmega328p) integrated ADC that has a sample rate of about 77kSps and a resolution of 10-bit, making the LTC2308 almost 7 times faster than the Arduino integrated one. Layout of the LTC2308 ADC. This ADC is controlled with a SPI interfac e and 8 channels, meaning it has 8 inputs. The secret to control the ADC is stated, as obvious, inside the datasheet . In my case, I'm only interested in a single-ended configuration, as shown in the image below. Types of configurations The goal is to insert an analog signal into the CH0 and control the ADC through the FPGA. As mentioned in the datasheet, the conversion is started when there is a rising edge on the CONVST input (cannot be restarted!). Between the conversion a 6-bit value is inserted into the SDI port to configure the operation mode. 6-bit input value that allows the configuration of the operation mode. This 6-bit value follows a configuration table, as stated below: While this 6-bit config value is shifted in, the data from the previous conversion is shifted out on SDO . After the 6-bit config value is shifted in, the ADC starts to acquiring the analog input at the input channels, getting ready for the next conversion. This phase takes a minimum time of 240ns. According to the figure 9 of the datasheet, that is the regular behaviour of the SPI interface with the ADC. CONVST goes HIGH and then LOW to start a conversion, and $t_{CONV}$ is the time the conversion takes. Right when the conversion finishes, the SDO is filled with data (starting with B11) waiting to be shifted out. When the SCK starts ticking , data (6-bit config values) in SDI is shifted in and data (result of the previous conversion) in SDO is shifted out. Right after the sixth rising edge from SCK the $t_{ACQ}$ starts, meaning the ADC started the acquisition of the analog input signal (remember this time has to be higher than 240 ns for improved performance). When the SCK reaches its 12 rising edge, the SDO has shifted out all the 12 bit from the ADC conversion. A next conversion may start when acquiring time is over. From the FPGA side... Intel provides some examples and documentation about the LTC2308 and the FPGA. In the manual of the Cyclone V GX Starter Kit , right in the page 94, there is a section called \"ADC Reading\" which plans to demonstrate, step by step, how to connect and program the ADC through the FPGA using the Nios 2. Image from the manual C5V From their demo, almost everything is done in Platform Designer. This might be tricky is the user is not experienced with Quartus software. Therefore, I will try to explain as better as possible. Platform Designer exists so the work around FPGA development is easier. Instead of coding in VDHL or Verilog, Platform Designer allows the user to pick from numerous Intellectual Properties (IPs) and to only care about the IPs' connections with each other. In this case, from a numerous list of IPs, it is necessary to pick a processor (Nios 2), memory (On-Chip Memory), JTAG connection, a PLL and a ADC controller . Everything else is done or used outside the Platform Designer. Nios2 + on-chip memory duo is necessary to code C inside the FPGA using the Eclipse tools. JTAG allows the user to communicate with the FPGA through the computer, and so, program the FPGA. The PLL is necessary to establish the ADC SCK to 40Mhz, since it doesn't work with higher frequencies and the original FPGA clock is 50Mhz and to introduce a delayed clock to fix ADC controller delay. At last, the ADC controller is a level shift as an Avalon MM Slave. (...) the SPI signals are delayed when going through the level shift. To correct the delay, we used PLL to generate two clock output for the ADC Controller, one for write path, the other shifted clock for read path. Hardware connection between FPGA and ADC (ADC controller) Quartus Side + Platform Designer Start by adding the IPs and the Platform Designer window should look like this: The connections need to be done manually but the addresses can be assigned by clicking in \"Assign Base Addresses\". This option assigns addresses to each IP and makes sure there is no collisions. Assign Base Addresses option Aside from this, we should start by assign the clocks of the system - therefore, it is necessary to use clk and PLL IP core. The clk_in is connected to a 50MHz clock and this value will be the reference clock of the PLL connected to clk . If clk is a 50MHz clock, refclk is 50MHz as well. Now, it is important to create other clocks that were stated above: SCK clock ( outclk0 ) SCK delayed clock ( outclk1 ) PLL parameters Apart from these two, another one is created - outclk2 - working at 100MHz and connected to the rest of the system, stating that the system works at 100MHz instead of the input 50MHz. System working at 100MHz from outclk2 When the time related IPs are connected, it is recommended to connect the duo Nios2 + on-chip memory. After the connections are made, it is necessary to change the parameters from both. The Nios 2 IP core, in the Vectors section, must have the vectors selected with the memory slave. In this case is memory.s1 Nios 2 IP core parameters In the On-chip memory IP core, the memory should be changed according the project requirements and the board constraints. The board I'm using has 610.5 Kbytes of embedded memory, so I could go as far as that. I choose to use only 131.072 Kbytes. on-chip memory IP parameters The ADC controller is connected to the three available clocks from the PLL. Remember that the SPI interface of the ADC works at 40MHz ( clock_sink_adc ), and one of the clocks must introduce a delay to fix the delay introduced in the level shift ( clock_sink_adc_delay ). The systemID IP core is used to confirm that the FPGA compiled is the same being programmed in Eclipse. From the Intel documentation it is stated as: The system ID core with Avalon interface is a simple read-only device that provides Platform Designer systems with a unique identifier. Nios II processor systems use the system ID core to verify that an executable program was compiled targeting the actual hardware image configured in the target FPGA. If the expected ID in the executable does not match the system ID core in the FPGA, it is possible that the software will not execute correctly. The other IP cores, like JTAG and PIO are used with the default configurations.","title":"Sensor Monitoring using FPGA connected to ADC (LTC2308) - Quartus Side"},{"location":"content/sensor-monitoring-fpga-adc-ltc2308/#sensor-monitoring-using-fpga-connected-to-adc-ltc2308-quartus-side","text":"","title":"Sensor Monitoring using FPGA connected to ADC (LTC2308) - Quartus Side"},{"location":"content/sensor-monitoring-fpga-adc-ltc2308/#or-how-to-use-the-cyclone-v-boards-adc-ltc2308","text":"","title":"(Or how to use the Cyclone V board's ADC - LTC2308)"},{"location":"content/sensor-monitoring-fpga-adc-ltc2308/#first-of-all","text":"The goal is to use the ADC in the Cyclone V dev board using Quartus and Eclipse as software. In order to start using the ADC, first, it is necessary to understand something about ADCs... In that case, let's start from the beginning.","title":"First of all..."},{"location":"content/sensor-monitoring-fpga-adc-ltc2308/#analog-to-digital-converter","text":"ADC stands for Analog-to-Digital Converter and converts analog signals (\"our world values\", like voltage) into digital values (\"computer world values\", like binary values). So, imagine that the analog signal is like a wave signal and the ADC needs to convert it, as precise as possible, to be readable at the microcontroller. Since the microcontroller only reads digital values, the ADC has the job to convert the signal from analog to digital and send it to the microcontroller, in order to be used in any kind of task. Image from this site But how does it happen? For each period, the signal is divided into some samples and within each sample there is a resolution. Let me explain... The ADC needs to convert , and so, in other words, needs to \"redraw\" the signal, as precise as possible. Therefore, to \"redraw\" the signal, the ADC needs to choose a couple of points within the signal to start drawing the new digital signal.","title":"Analog to Digital Converter"},{"location":"content/sensor-monitoring-fpga-adc-ltc2308/#sample-rate","text":"To calculate the sample rate : f_{s}=\\frac{1}{T} If $f_{s}$ is the sample rate , meaning the sample frequency , the period $T$ is the period of an individual sample. In the image above, the period in which each sample triggers takes 0.05 seconds, or 50 milliseconds. Then $f_{s}$ is 20 Samples per second (S/s). This value feels small for a sample rate, but the original signal has a frequency of 1Hz, meaning the sample rate is 20 times bigger than the original signal, providing a acceptable reconstruction of the analog signal. A rule to follow on this matter is the Nyquist Theorem. According to this theorem, the sample rate needs to be, at least, two times bigger than the original analog signal. f_{Nyquist} \\geq 2 \\cdot f_{OriginalSignal} Therefore, as stated before, the Nyquist Theorem and the image above, conclude that a higher sample rate allows the analog signal to be reconstructed into a digital signal in a better way.","title":"Sample rate"},{"location":"content/sensor-monitoring-fpga-adc-ltc2308/#resolution","text":"Resolution is about precision. The bigger the resolution, the higher the precision. This is very important in very critical sensors, used in industry or automotive fields, but it is not a big deal in hobby usage. In short, the resolution is viewed as steps that is shown when a signal is being reconstructed. Image from this site To calculate the precision in terms of voltage, it is necessary to know the reference voltage and the resolution, then: Step(V) = \\frac{V_{reference}}{2^{Resolution}} The Cyclone 5 board has Voltage Reference of 4.096V and the ADC has a 12-bit resolution. Then, the Step voltage is about 1mV.","title":"Resolution"},{"location":"content/sensor-monitoring-fpga-adc-ltc2308/#adc-ltc2308","text":"Now that theory about ADCs is revisited, is possible to go deeper and analyse an ADC datasheet. The LTC2308 is a 500kSps/12 bit ADC, which means that has a sample rate of 500 000 Samples per second with a resolution of 12-bit(!). This is amazing compared to the Arduino Uno (atmega328p) integrated ADC that has a sample rate of about 77kSps and a resolution of 10-bit, making the LTC2308 almost 7 times faster than the Arduino integrated one. Layout of the LTC2308 ADC. This ADC is controlled with a SPI interfac e and 8 channels, meaning it has 8 inputs. The secret to control the ADC is stated, as obvious, inside the datasheet . In my case, I'm only interested in a single-ended configuration, as shown in the image below. Types of configurations The goal is to insert an analog signal into the CH0 and control the ADC through the FPGA. As mentioned in the datasheet, the conversion is started when there is a rising edge on the CONVST input (cannot be restarted!). Between the conversion a 6-bit value is inserted into the SDI port to configure the operation mode. 6-bit input value that allows the configuration of the operation mode. This 6-bit value follows a configuration table, as stated below: While this 6-bit config value is shifted in, the data from the previous conversion is shifted out on SDO . After the 6-bit config value is shifted in, the ADC starts to acquiring the analog input at the input channels, getting ready for the next conversion. This phase takes a minimum time of 240ns. According to the figure 9 of the datasheet, that is the regular behaviour of the SPI interface with the ADC. CONVST goes HIGH and then LOW to start a conversion, and $t_{CONV}$ is the time the conversion takes. Right when the conversion finishes, the SDO is filled with data (starting with B11) waiting to be shifted out. When the SCK starts ticking , data (6-bit config values) in SDI is shifted in and data (result of the previous conversion) in SDO is shifted out. Right after the sixth rising edge from SCK the $t_{ACQ}$ starts, meaning the ADC started the acquisition of the analog input signal (remember this time has to be higher than 240 ns for improved performance). When the SCK reaches its 12 rising edge, the SDO has shifted out all the 12 bit from the ADC conversion. A next conversion may start when acquiring time is over.","title":"ADC LTC2308"},{"location":"content/sensor-monitoring-fpga-adc-ltc2308/#from-the-fpga-side","text":"Intel provides some examples and documentation about the LTC2308 and the FPGA. In the manual of the Cyclone V GX Starter Kit , right in the page 94, there is a section called \"ADC Reading\" which plans to demonstrate, step by step, how to connect and program the ADC through the FPGA using the Nios 2. Image from the manual C5V From their demo, almost everything is done in Platform Designer. This might be tricky is the user is not experienced with Quartus software. Therefore, I will try to explain as better as possible. Platform Designer exists so the work around FPGA development is easier. Instead of coding in VDHL or Verilog, Platform Designer allows the user to pick from numerous Intellectual Properties (IPs) and to only care about the IPs' connections with each other. In this case, from a numerous list of IPs, it is necessary to pick a processor (Nios 2), memory (On-Chip Memory), JTAG connection, a PLL and a ADC controller . Everything else is done or used outside the Platform Designer. Nios2 + on-chip memory duo is necessary to code C inside the FPGA using the Eclipse tools. JTAG allows the user to communicate with the FPGA through the computer, and so, program the FPGA. The PLL is necessary to establish the ADC SCK to 40Mhz, since it doesn't work with higher frequencies and the original FPGA clock is 50Mhz and to introduce a delayed clock to fix ADC controller delay. At last, the ADC controller is a level shift as an Avalon MM Slave. (...) the SPI signals are delayed when going through the level shift. To correct the delay, we used PLL to generate two clock output for the ADC Controller, one for write path, the other shifted clock for read path. Hardware connection between FPGA and ADC (ADC controller)","title":"From the FPGA side..."},{"location":"content/sensor-monitoring-fpga-adc-ltc2308/#quartus-side-platform-designer","text":"Start by adding the IPs and the Platform Designer window should look like this: The connections need to be done manually but the addresses can be assigned by clicking in \"Assign Base Addresses\". This option assigns addresses to each IP and makes sure there is no collisions. Assign Base Addresses option Aside from this, we should start by assign the clocks of the system - therefore, it is necessary to use clk and PLL IP core. The clk_in is connected to a 50MHz clock and this value will be the reference clock of the PLL connected to clk . If clk is a 50MHz clock, refclk is 50MHz as well. Now, it is important to create other clocks that were stated above: SCK clock ( outclk0 ) SCK delayed clock ( outclk1 ) PLL parameters Apart from these two, another one is created - outclk2 - working at 100MHz and connected to the rest of the system, stating that the system works at 100MHz instead of the input 50MHz. System working at 100MHz from outclk2 When the time related IPs are connected, it is recommended to connect the duo Nios2 + on-chip memory. After the connections are made, it is necessary to change the parameters from both. The Nios 2 IP core, in the Vectors section, must have the vectors selected with the memory slave. In this case is memory.s1 Nios 2 IP core parameters In the On-chip memory IP core, the memory should be changed according the project requirements and the board constraints. The board I'm using has 610.5 Kbytes of embedded memory, so I could go as far as that. I choose to use only 131.072 Kbytes. on-chip memory IP parameters The ADC controller is connected to the three available clocks from the PLL. Remember that the SPI interface of the ADC works at 40MHz ( clock_sink_adc ), and one of the clocks must introduce a delay to fix the delay introduced in the level shift ( clock_sink_adc_delay ). The systemID IP core is used to confirm that the FPGA compiled is the same being programmed in Eclipse. From the Intel documentation it is stated as: The system ID core with Avalon interface is a simple read-only device that provides Platform Designer systems with a unique identifier. Nios II processor systems use the system ID core to verify that an executable program was compiled targeting the actual hardware image configured in the target FPGA. If the expected ID in the executable does not match the system ID core in the FPGA, it is possible that the software will not execute correctly. The other IP cores, like JTAG and PIO are used with the default configurations.","title":"Quartus Side + Platform Designer"},{"location":"content/smoke-extractor/","text":"How can you make your own portable Smoke Extractor 31/07/2022 Introduction One of my 2022 goals was to create something - a product or a service. Since then, I've been working on a personal, portable and small smoke extractor . I started learning about DC/DC Boost Converters when I noticed the fans that required more power were not supplied with 5V, they were, instead, supplied with 12V or 24V. This finding pushed me into learning about boost converter's hardware design and requirements which would lead to my end goal. Design and challenges After learning about the boost converters, the design part was the next big thing . Designed the entire case and tried to keep a minimalist look while minimizing any empty spot and creating a solid aesthetic object. The renders above are from my the first attempt to finish the design. And, as always tends to happen, the design was far from finished. My first idea was to split the case in two: the front, which would take the pcb and the smoke filter. the back, which would act like a lid and would have some screws to attach the design together. After the first printing attempt, I realized right away this was not the best idea - the front part was hard to print, specially on the side part where the smoke extractor is (even with printed supports, the print had a bad quality). Therefore, the solution was to split the design in three parts, adding a middle layer which holds both front and back together. Also, if you were attentive, you could notice the back from the first renders didn't have the honeycomb pattern. The older back was way too weak and was causing the fan to bend backwards, mainly caused by the screws force on the bottom. The new back is robust enough. One smart fool Until this point, the project looks awesome, right? I thought so. However, this project was (and is) supposed to be open-source but there are no files or documentation about it. Let me explain. I've started this project with the boost converter PCB , but eventually I aimed for more - I wanted to learn more about electronics and PCB design. Something which started to be a single boost converter board that would convert 5V to 12V, became a battery-powered-charged-converter-from-3.7V-or-5V-to-9V-or-12V - complex enough . I lost the motivation right away. Every right step, every successful design, I would add more complexity in each of them. My worst enemy was no one but myself. Realized this when the design, together with the single boost board PCB, turned out to be an amazing prototype. However, as I had already added more complexity on top of it, no longer had the files to share. In my opinion, Albert Einstein described this problem accurately: Any intelligent fool can make things bigger, more complex, and more violent. It takes a touch of genius - and a lot of courage - to move in the opposite direction. It is time to have this touch. Supply chain and product improvements saved me from self disappointment Supply chain issues are usually very bad thing and everyone working at a tech company knows what I am talking about. This could be my case if I didn't have to redesign everything from scratch anyway. Turns out, the boost converter I have been using the whole time , is, for everyone's surprise, out of stock. It sucks !... but, comes in the right time as well! Let's also take this chance to look back and to polish the prototype edges. Electrical issues As for today, the product, in order to work correctly, needs to draw around 600mA at 5V . This might change with the next boost converter chip, but this is a good starting point to aim for 80% of efficiency . 600mA, at most of the USB default ports, is already too much, since most of the USB default ports can only provide current from 100mA to 500mA. When I connected the smoke extractor, fully assembled, to my computers USB dock, it was causing my desk light (also powered by the same dock), to flicker every half a second. Something was not right, pretty obvious huh! To know more about this issue, I created a post on Reddit . I wanted to know exactly what was happening and what was I missing. Luckily, an amazing person decided to help me and explain why my desk lamp was flickering: Probably overcurrent detection triggering, then resetting and waiting a reasonable time for inrush current to finish before triggering again. Easy explanation, thanks triffid_hunter ! As I was reading his explanation, I knew this had to be fixed. How could I fix this? Nevertheless, this might not be the problem I think it is. The next board will be battery powered and charged through USB-C. Its normal operation does not include the USB-C input to be the main source power. Next changes on version 2.0 For the version v2.0, if I'm even allowed to call it that, the smoke extractor will include a lithium 18350 battery, the charger circuit and consecutive safety circuit (discharge, overcharge, etc) and a battery level button followed by some tiny lights to return feedback to the user. Addionally, will add the option to purchase the Bill of Materials straight from JLCPCB .","title":"How can you make your own portable Smoke Extractor"},{"location":"content/smoke-extractor/#how-can-you-make-your-own-portable-smoke-extractor","text":"","title":"How can you make your own portable Smoke Extractor"},{"location":"content/smoke-extractor/#introduction","text":"One of my 2022 goals was to create something - a product or a service. Since then, I've been working on a personal, portable and small smoke extractor . I started learning about DC/DC Boost Converters when I noticed the fans that required more power were not supplied with 5V, they were, instead, supplied with 12V or 24V. This finding pushed me into learning about boost converter's hardware design and requirements which would lead to my end goal.","title":"Introduction"},{"location":"content/smoke-extractor/#design-and-challenges","text":"After learning about the boost converters, the design part was the next big thing . Designed the entire case and tried to keep a minimalist look while minimizing any empty spot and creating a solid aesthetic object. The renders above are from my the first attempt to finish the design. And, as always tends to happen, the design was far from finished. My first idea was to split the case in two: the front, which would take the pcb and the smoke filter. the back, which would act like a lid and would have some screws to attach the design together. After the first printing attempt, I realized right away this was not the best idea - the front part was hard to print, specially on the side part where the smoke extractor is (even with printed supports, the print had a bad quality). Therefore, the solution was to split the design in three parts, adding a middle layer which holds both front and back together. Also, if you were attentive, you could notice the back from the first renders didn't have the honeycomb pattern. The older back was way too weak and was causing the fan to bend backwards, mainly caused by the screws force on the bottom. The new back is robust enough.","title":"Design and challenges"},{"location":"content/smoke-extractor/#one-smart-fool","text":"Until this point, the project looks awesome, right? I thought so. However, this project was (and is) supposed to be open-source but there are no files or documentation about it. Let me explain. I've started this project with the boost converter PCB , but eventually I aimed for more - I wanted to learn more about electronics and PCB design. Something which started to be a single boost converter board that would convert 5V to 12V, became a battery-powered-charged-converter-from-3.7V-or-5V-to-9V-or-12V - complex enough . I lost the motivation right away. Every right step, every successful design, I would add more complexity in each of them. My worst enemy was no one but myself. Realized this when the design, together with the single boost board PCB, turned out to be an amazing prototype. However, as I had already added more complexity on top of it, no longer had the files to share. In my opinion, Albert Einstein described this problem accurately: Any intelligent fool can make things bigger, more complex, and more violent. It takes a touch of genius - and a lot of courage - to move in the opposite direction. It is time to have this touch.","title":"One smart fool"},{"location":"content/smoke-extractor/#supply-chain-and-product-improvements-saved-me-from-self-disappointment","text":"Supply chain issues are usually very bad thing and everyone working at a tech company knows what I am talking about. This could be my case if I didn't have to redesign everything from scratch anyway. Turns out, the boost converter I have been using the whole time , is, for everyone's surprise, out of stock. It sucks !... but, comes in the right time as well! Let's also take this chance to look back and to polish the prototype edges.","title":"Supply chain and product improvements saved me from self disappointment"},{"location":"content/smoke-extractor/#electrical-issues","text":"As for today, the product, in order to work correctly, needs to draw around 600mA at 5V . This might change with the next boost converter chip, but this is a good starting point to aim for 80% of efficiency . 600mA, at most of the USB default ports, is already too much, since most of the USB default ports can only provide current from 100mA to 500mA. When I connected the smoke extractor, fully assembled, to my computers USB dock, it was causing my desk light (also powered by the same dock), to flicker every half a second. Something was not right, pretty obvious huh! To know more about this issue, I created a post on Reddit . I wanted to know exactly what was happening and what was I missing. Luckily, an amazing person decided to help me and explain why my desk lamp was flickering: Probably overcurrent detection triggering, then resetting and waiting a reasonable time for inrush current to finish before triggering again. Easy explanation, thanks triffid_hunter ! As I was reading his explanation, I knew this had to be fixed. How could I fix this? Nevertheless, this might not be the problem I think it is. The next board will be battery powered and charged through USB-C. Its normal operation does not include the USB-C input to be the main source power.","title":"Electrical issues"},{"location":"content/smoke-extractor/#next-changes-on-version-20","text":"For the version v2.0, if I'm even allowed to call it that, the smoke extractor will include a lithium 18350 battery, the charger circuit and consecutive safety circuit (discharge, overcharge, etc) and a battery level button followed by some tiny lights to return feedback to the user. Addionally, will add the option to purchase the Bill of Materials straight from JLCPCB .","title":"Next changes on version 2.0"},{"location":"content/starting-on-fpga/","text":"Starting on FPGA... I'm now starting dealing with FPGA on my daily basis, so I thought it would be the perfect time to keep my journey with this technology all documented. Since I'm using a Cyclone V GX , I use the Quartus II Lite software (20.1v) from Intel to design and program the FPGA. From my MacOS device, I'm running a virtual machine (Parallels 13) with Lubuntu 16.04 LTS 64-bit installed. For FPGA development it's advisable to have high speed CPU with multiple cores and fast RAM , therefore I didn't want to use a lot of RAM and CPU power - I choose Lubuntu for being well known for its low-power needs and still providing a reliable OS, trying to make the best of the situation, since running a OS above other OS is not the ideal scenery. Although, in Linux, there is no need to install any driver to the USB Blaster, it's necessary to set the permissions related to the usb serial port. Intel has its own documentation about this, but I found a better a smaller one which provides solutions for any problem about the USB Blaster (I had the stated jtagd problem and fixed it by closing the Quartus, kill any jtagd process and open it again). During my research to setup the FPGA development software, I came up with a ton of useful and very important tutorials from Intel explaining how to program the FPGA and tutorials about HDL basic design: How to Program Your First FPGA Device How to Begin a Simple FPGA Design Verilog HDL Basics Also, some useful additional links: EEC 180 Tutorial: (Strongly) Recommended File Organization Verilog Tutorial Pin Planner and First Modules As I finished the tutorials I started playing around with the FPGA, trying to create some logic design and program it to the FPGA. From the How to Program Your First FPGA Device I copied the template and made this simple blink code that uses a 32-bit counter, a switch and 2 Leds: // create module module blink ( input wire clk , // 50MHz input clock input wire switch , output wire [ 1 : 0 ] LED // LED ouput ); // create a binary counter reg [ 31 : 0 ] cnt ; // 32-bit counter initial begin cnt <= 32'h00000000 ; // start at zero end always @( posedge clk ) begin cnt <= cnt + 1 ; // count up end //assign LED to 25th bit of the counter to blink the LED at a few Hz assign LED [ 0 ] = switch ? cnt [ 25 ] : cnt [ 22 ]; assign LED [ 1 ] = switch ? cnt [ 22 ] : cnt [ 25 ]; endmodule Then, after creating this simple module I connected the I/O to actual PINs in the development board. To the switch I choose the first one, Slide switch[0], PIN_AC9. To the LED[0] , set the first red LED, PIN_F7 . To the LED[1] , set the first green LED, PIN_L7. And finally, to the clk , set the PIN_R20 . Be careful setting the I/O standard voltage. This is a very simple program but allows to check the peripherals inside the development board. Current situation... I'm now trying to establish UART communication between the FPGA and the Computer. Along my search I came across with two possibilities: Creating a Qsys with Nios 2 soft processor and using C to bridge the communication Easier and provides C programming capabilities but Nios 2 is not open-source and the provided version of it for Lite License is very slow. Also takes FPGA capacity. Using custom Verilog modules to design UART to RS232 communication Not so easy to implement, requires deep learning of UART technology and Verilog. Relies only in HDL.","title":"Starting on FPGA..."},{"location":"content/starting-on-fpga/#starting-on-fpga","text":"I'm now starting dealing with FPGA on my daily basis, so I thought it would be the perfect time to keep my journey with this technology all documented. Since I'm using a Cyclone V GX , I use the Quartus II Lite software (20.1v) from Intel to design and program the FPGA. From my MacOS device, I'm running a virtual machine (Parallels 13) with Lubuntu 16.04 LTS 64-bit installed. For FPGA development it's advisable to have high speed CPU with multiple cores and fast RAM , therefore I didn't want to use a lot of RAM and CPU power - I choose Lubuntu for being well known for its low-power needs and still providing a reliable OS, trying to make the best of the situation, since running a OS above other OS is not the ideal scenery. Although, in Linux, there is no need to install any driver to the USB Blaster, it's necessary to set the permissions related to the usb serial port. Intel has its own documentation about this, but I found a better a smaller one which provides solutions for any problem about the USB Blaster (I had the stated jtagd problem and fixed it by closing the Quartus, kill any jtagd process and open it again). During my research to setup the FPGA development software, I came up with a ton of useful and very important tutorials from Intel explaining how to program the FPGA and tutorials about HDL basic design: How to Program Your First FPGA Device How to Begin a Simple FPGA Design Verilog HDL Basics Also, some useful additional links: EEC 180 Tutorial: (Strongly) Recommended File Organization Verilog Tutorial","title":"Starting on FPGA..."},{"location":"content/starting-on-fpga/#pin-planner-and-first-modules","text":"As I finished the tutorials I started playing around with the FPGA, trying to create some logic design and program it to the FPGA. From the How to Program Your First FPGA Device I copied the template and made this simple blink code that uses a 32-bit counter, a switch and 2 Leds: // create module module blink ( input wire clk , // 50MHz input clock input wire switch , output wire [ 1 : 0 ] LED // LED ouput ); // create a binary counter reg [ 31 : 0 ] cnt ; // 32-bit counter initial begin cnt <= 32'h00000000 ; // start at zero end always @( posedge clk ) begin cnt <= cnt + 1 ; // count up end //assign LED to 25th bit of the counter to blink the LED at a few Hz assign LED [ 0 ] = switch ? cnt [ 25 ] : cnt [ 22 ]; assign LED [ 1 ] = switch ? cnt [ 22 ] : cnt [ 25 ]; endmodule Then, after creating this simple module I connected the I/O to actual PINs in the development board. To the switch I choose the first one, Slide switch[0], PIN_AC9. To the LED[0] , set the first red LED, PIN_F7 . To the LED[1] , set the first green LED, PIN_L7. And finally, to the clk , set the PIN_R20 . Be careful setting the I/O standard voltage. This is a very simple program but allows to check the peripherals inside the development board.","title":"Pin Planner and First Modules"},{"location":"content/starting-on-fpga/#current-situation","text":"I'm now trying to establish UART communication between the FPGA and the Computer. Along my search I came across with two possibilities: Creating a Qsys with Nios 2 soft processor and using C to bridge the communication Easier and provides C programming capabilities but Nios 2 is not open-source and the provided version of it for Lite License is very slow. Also takes FPGA capacity. Using custom Verilog modules to design UART to RS232 communication Not so easy to implement, requires deep learning of UART technology and Verilog. Relies only in HDL.","title":"Current situation..."},{"location":"content/version-control-script/","text":"How to create a directory generator with Python for your ideas Ever since I remember, I've always struggle with the fact that I couldn't manage very well my own ideas. The version control was there on the code files, but not on the others, like 3d design files or gerber files. This mess results in outdated files, while others were updated since the start. I would end up with an updated firmware with an outdated pcb, causing friction between my brain cells \ud83e\udd27 So I came up with a solution. So simple but yet so useful - create a folder with multiple folders meant to store information about the field. Four folders, each one with a different use. The Firmware is stored in a folder where the PlatformIO will create the project code. The pcb is where the KiCad project is going to be, and even has three others folder to store the bill of materials in html (seen in the previous post), images of the pcb in svg and a final gerber , ready to be orderer! To store the Fusion360 project files or Cura .gcode files, the stl folder is there to fulfill this need. Finally, the .git is where the control version is done and stored \ud83d\ude09 Now, to do this I used Python. Easy and simple as usual. Since I tend to use both operation systems, windows and MacOS, the code is adapted to both. The code seems to work pretty great and it is fast as well. How to create a directory generator with Python for your ideas v0.2 Last post was about using a directory generator kind of thing. So I thought about making it more user friendly and recently I saw tkinter which is a lib that creates a GUI for Python \ud83d\udda5\ufe0f The requirements were the following: Choose save directory and print text Choose directory name from an input text Create README.md files for each folder. Generate directory Print some debug stuff First of all, tkinter is super easy to use. Python 3.9.2 does not come with it, but it is only required one single line to install it. The import of filedialog enables the user to choose the save path directory. This event is triggered by a button. Afterwards, the last button, the \"Generate\" one, triggers the creation of the desired directories. The README.me can be edited inside the python code. Regarding createFile(path, readme content) it is possible to create a README.me and edit as this: createFile ( direc , \"This is the main README of the project. \" ) A default directory path is set to facilitate the use of this application, but the same can be changed in: ## DEFAULT DIRECTORY self . var . set ( '/Users/nunonogueira/Documents/' ) The final result has been tested in macOS 11.2.3 and not yet in Windows... But I'll test it soon! Finally, here the code I used:","title":"How to create a directory generator with Python for your ideas"},{"location":"content/version-control-script/#how-to-create-a-directory-generator-with-python-for-your-ideas","text":"Ever since I remember, I've always struggle with the fact that I couldn't manage very well my own ideas. The version control was there on the code files, but not on the others, like 3d design files or gerber files. This mess results in outdated files, while others were updated since the start. I would end up with an updated firmware with an outdated pcb, causing friction between my brain cells \ud83e\udd27 So I came up with a solution. So simple but yet so useful - create a folder with multiple folders meant to store information about the field. Four folders, each one with a different use. The Firmware is stored in a folder where the PlatformIO will create the project code. The pcb is where the KiCad project is going to be, and even has three others folder to store the bill of materials in html (seen in the previous post), images of the pcb in svg and a final gerber , ready to be orderer! To store the Fusion360 project files or Cura .gcode files, the stl folder is there to fulfill this need. Finally, the .git is where the control version is done and stored \ud83d\ude09 Now, to do this I used Python. Easy and simple as usual. Since I tend to use both operation systems, windows and MacOS, the code is adapted to both. The code seems to work pretty great and it is fast as well.","title":"How to create a directory generator with Python for your ideas"},{"location":"content/version-control-script/#how-to-create-a-directory-generator-with-python-for-your-ideas-v02","text":"Last post was about using a directory generator kind of thing. So I thought about making it more user friendly and recently I saw tkinter which is a lib that creates a GUI for Python \ud83d\udda5\ufe0f The requirements were the following: Choose save directory and print text Choose directory name from an input text Create README.md files for each folder. Generate directory Print some debug stuff First of all, tkinter is super easy to use. Python 3.9.2 does not come with it, but it is only required one single line to install it. The import of filedialog enables the user to choose the save path directory. This event is triggered by a button. Afterwards, the last button, the \"Generate\" one, triggers the creation of the desired directories. The README.me can be edited inside the python code. Regarding createFile(path, readme content) it is possible to create a README.me and edit as this: createFile ( direc , \"This is the main README of the project. \" ) A default directory path is set to facilitate the use of this application, but the same can be changed in: ## DEFAULT DIRECTORY self . var . set ( '/Users/nunonogueira/Documents/' ) The final result has been tested in macOS 11.2.3 and not yet in Windows... But I'll test it soon! Finally, here the code I used:","title":"How to create a directory generator with Python for your ideas v0.2"},{"location":"content/year-2021-recap/","text":"Recap 2021 Intro 2021 was, indeed, a crazy year . Finished my masters, applied for the first time to full-time jobs and got one in Stockholm, Sweden. Met amazing and smart people - learned so much during this year, it is hard to believe. At the end of March I left my home country (Portugal) and got in the crazy adventure of living in Sweden. As an European, the process is quite easy, but it is such a huge responsability. Living alone it is not easy, specially when you left your family, girlfriend and friends behind - everything that you were used to before. A portuguese writer, Jos\u00e9 Saramago, used to say that we never actually leave the home country, we just take a piece of it with us. I believe this is very true, and this kind of thought helps me to stay alone and never lose focus on what's important for myself and for those who care about me. One important thing is to remind yourself of why are you doing it and what you plan to achieve. I'm not going to name the reasons I'm doing it, but I plan to achieve happiness. That's why I moved to Sweden, that's why I'm writing this right now. I know this is super vague, but it is my final achievement - it is not money or luxury. I don't like cars, I don't like anything fancy. But, I like to live well and make others who live close to me to experience a pleasant life as well. It is so messed up that such a simple (single word) achievement is so hard to get. People try to achieve it during their entire life, some die and never find, or even, find too late. Nevertheless, let's start to group all the 2021 achievements \ud83d\ude01 Achievements Finished ECE Masters Got a full time job as an IoT Engineer. Which I love! Learned to live alone and manage to pay all the bills by myself in the beautiful country that is Sweden! Travelled to Finland, Helsinki, and Estonia, Tallinn, first time in a cruise! First time ice skating, it is fun! Bought some electronics equipment - cheap solder station, lab power supply, better monitors (looking for new equipment next year). Ordered the crazy amount of 8 different PCB designs from JLCPCB \ud83d\ude06. In the mean time, learn buck-boost converter designs and learned some great design guidelines! Learn so much - devOps, IoT, firmware, development to production, how to release, how to build stable and solid code, Google Cloud Platform, software architecture... Left Karate and started to do bouldering (Will start to do karate again soon, tried to do Karate close to where I live but it wasnt my thing). Applied for Swedish classes (Starting 2022 \ud83c\uddf8\ud83c\uddea). Read: Launch by Jeff Walker , Rework by Jason Fried , Meditations of Marcus Aurelius , Discourses and Selected Writings by Epictetus . Crazy! For 2022 Be fluent in Swedish. Finish ONE project (for good!) - stop creating tiny projects. Less website posts, but bigger with higher quality. Travel Sweden alone as I train the language (one time a month). Leave digital photography and embrace analog. Last but not the least, end up 2022 with a proper product/service to sell or make it public (probably the smoke extractor). Website growth When I first launch this, August 2020, had no plan to slow down - two posts per month. When I left Portugal and started working, I did not have the time nor the energy to write so much. Meaning the number of posts started to slowly decreased over time. The plan is to write less but better! Using Google Analytics I can notice my website has been visited mostly by people in US and Portugal, some in Brazil and China! Awesome! This one is pretty personal, behind this website there is an human trying to live the best life. See you in 2022. (Writing this from Varadero, Cuba @ 21/12/2021)","title":"Recap 2021"},{"location":"content/year-2021-recap/#recap-2021","text":"","title":"Recap 2021"},{"location":"content/year-2021-recap/#intro","text":"2021 was, indeed, a crazy year . Finished my masters, applied for the first time to full-time jobs and got one in Stockholm, Sweden. Met amazing and smart people - learned so much during this year, it is hard to believe. At the end of March I left my home country (Portugal) and got in the crazy adventure of living in Sweden. As an European, the process is quite easy, but it is such a huge responsability. Living alone it is not easy, specially when you left your family, girlfriend and friends behind - everything that you were used to before. A portuguese writer, Jos\u00e9 Saramago, used to say that we never actually leave the home country, we just take a piece of it with us. I believe this is very true, and this kind of thought helps me to stay alone and never lose focus on what's important for myself and for those who care about me. One important thing is to remind yourself of why are you doing it and what you plan to achieve. I'm not going to name the reasons I'm doing it, but I plan to achieve happiness. That's why I moved to Sweden, that's why I'm writing this right now. I know this is super vague, but it is my final achievement - it is not money or luxury. I don't like cars, I don't like anything fancy. But, I like to live well and make others who live close to me to experience a pleasant life as well. It is so messed up that such a simple (single word) achievement is so hard to get. People try to achieve it during their entire life, some die and never find, or even, find too late. Nevertheless, let's start to group all the 2021 achievements \ud83d\ude01","title":"Intro"},{"location":"content/year-2021-recap/#achievements","text":"Finished ECE Masters Got a full time job as an IoT Engineer. Which I love! Learned to live alone and manage to pay all the bills by myself in the beautiful country that is Sweden! Travelled to Finland, Helsinki, and Estonia, Tallinn, first time in a cruise! First time ice skating, it is fun! Bought some electronics equipment - cheap solder station, lab power supply, better monitors (looking for new equipment next year). Ordered the crazy amount of 8 different PCB designs from JLCPCB \ud83d\ude06. In the mean time, learn buck-boost converter designs and learned some great design guidelines! Learn so much - devOps, IoT, firmware, development to production, how to release, how to build stable and solid code, Google Cloud Platform, software architecture... Left Karate and started to do bouldering (Will start to do karate again soon, tried to do Karate close to where I live but it wasnt my thing). Applied for Swedish classes (Starting 2022 \ud83c\uddf8\ud83c\uddea). Read: Launch by Jeff Walker , Rework by Jason Fried , Meditations of Marcus Aurelius , Discourses and Selected Writings by Epictetus . Crazy!","title":"Achievements"},{"location":"content/year-2021-recap/#for-2022","text":"Be fluent in Swedish. Finish ONE project (for good!) - stop creating tiny projects. Less website posts, but bigger with higher quality. Travel Sweden alone as I train the language (one time a month). Leave digital photography and embrace analog. Last but not the least, end up 2022 with a proper product/service to sell or make it public (probably the smoke extractor).","title":"For 2022"},{"location":"content/year-2021-recap/#website-growth","text":"When I first launch this, August 2020, had no plan to slow down - two posts per month. When I left Portugal and started working, I did not have the time nor the energy to write so much. Meaning the number of posts started to slowly decreased over time. The plan is to write less but better! Using Google Analytics I can notice my website has been visited mostly by people in US and Portugal, some in Brazil and China! Awesome! This one is pretty personal, behind this website there is an human trying to live the best life. See you in 2022. (Writing this from Varadero, Cuba @ 21/12/2021)","title":"Website growth"},{"location":"content/cmake/cmake/","text":"The basics of CMake Introduction CMake is everywhere. (If you still use Makefile, keep reading, you are missing out in life!) CMake can look complicated but in fact it is not: has all the complexity of a build system that can build almost anything but, in fact, its use is as simple as it gets. This is not a complete guide into CMake, but one to get you started. If you want to read more about CMake, I recommend you read more about Modern CMake . Requirements To start with CMake, I'd need a CMakeLists.txt file like this: cmake_minimum_required ( VERSION 3.16.0 ) project ( test_c ) add_executable ( test test.c ) And a test.c file like this: #include <stdio.h> int add ( int a , int b ) { return a + b ; } int main () { int a , b ; printf ( \"Enter number a: \" ); scanf ( \"%d\" , & a ); printf ( \"Enter number b: \" ); scanf ( \"%d\" , & b ); printf ( \"Adding result -> %d\" , add ( a , b )); } With a project structure as such: -- CMakeLists.txt -- test.c The fun thing about CMake is that you only need to run cmake once: $ mkdir build $ cmake -B build/ This will generate the Makefile inside the build/ folder. Next, jump into the directory created and generate the Makefile: $ cd build $ make Once this is done, you will end up with something like this: -- build -- Makefile -- test -- CMakeLists.txt -- test.c Running make has generated the test executable. Now, run: $ ./test Done \ud83d\udc4d\ud83c\udffc Adding libraries Adding a library is easy. Let's start with this directory structure: -- CMakeLists.txt -- test.c -- /test_lib -- test_lib.c -- test_lib.h Inside test.c : #include <stdio.h> #include \"test_lib.h\" int add ( int a , int b ) { return a + b ; } int main () { int a , b ; printf ( \"Enter number a: \" ); scanf ( \"%d\" , & a ); printf ( \"Enter number b: \" ); scanf ( \"%d\" , & b ); printf ( \"Mux result -> %d\" , mux ( a , b )); // Uses `mux` method } Inside test_lib.h : int mux ( int a , int b ); Inside test_lib.c : #include \"test_lib.h\" int mux ( int a , int b ) { return a * b ; } Finally, to add this as library to the executable target test , add: cmake_minimum_required ( VERSION 3.16.0 ) project ( test_c ) add_library ( test_lib ${ CMAKE_CURRENT_SOURCE_DIR } /test_lib/test_lib.c ) target_include_directories ( test_lib PUBLIC ${ CMAKE_CURRENT_SOURCE_DIR } /test_lib ) add_executable ( test src/test.c ) target_link_libraries ( test test_lib ) The add_library creates a target (test_lib) that points to the test_lib.c file and target_link_libraries links the test_lib target to the executable test target. Hit $ make again \ud83d\udc4d\ud83c\udffc Adding an external library Imagine the scenario where you have your project and want to include an external library you have seen on Github. This is your project structure: CMakeLists.txt -- /src -- test.c -- /test_lib -- test_lib.c -- test_lib.h -- CMakeLists.txt The folder src has the file we want to execute and test.c contains the int main() function. The test_lib folder contains one executable file, one header and one CMakeLists.txt. Inside test_lib/CMakeLists.txt we have the following: # The library `test_lib` should ideally be one step below set ( TEST_LIB_PATH ${ CMAKE_CURRENT_SOURCE_DIR } ) # Set it up as a library. add_library ( test_lib ${ TEST_LIB_PATH } /test_lib.c ) # Turn it into a searchable field in PUBLIC. This means any target that includes # this library is capable of looking for the directory passed below. target_include_directories ( test_lib PUBLIC ${ TEST_LIB_PATH } ) There, the library is created and placed under a PUBLIC inheritance. If you don't know which inheritance to choose, leave it blank and CMake will default it to PUBLIC. Nevertheless, this is a library you just downloaded and want to include it inside you project. The magic happens in the root CMakeLists.txt: cmake_minimum_required ( VERSION 3.16.0 ) project ( test_c VERSION 1.0 DESCRIPTION \"An example project with CMake\" LANGUAGES C ) set_property ( GLOBAL PROPERTY USE_FOLDERS ON ) add_executable ( test ${ CMAKE_CURRENT_SOURCE_DIR } /src/test.c ) add_subdirectory ( test_lib ) target_link_libraries ( test PRIVATE test_lib ) add_custom_command ( TARGET test POST_BUILD COMMENT \"Running ./test\" COMMAND ./test ) You can easily add the external library by calling add_subdirectory and the target library name you've created in test_lib/CMakeLists.txt as an argument. Once you add the subdirectory, you need to link it to the executable target, test . You can link it as PRIVATE since you won't share this subdirectory anywhere else. Finally, instead of runnning $ make and then $ ./test , you can ask CMake to do that for you by using the add_custom_command method. As an argument of add_custom_command , add COMMAND followed by the command you want to run. The POST_BUILD keyword makes sure the command will only run after building the code. Hit $ make \ud83d\udc4d\ud83c\udffc","title":"Cmake"},{"location":"content/cmake/cmake/#the-basics-of-cmake","text":"","title":"The basics of CMake"},{"location":"content/cmake/cmake/#introduction","text":"CMake is everywhere. (If you still use Makefile, keep reading, you are missing out in life!) CMake can look complicated but in fact it is not: has all the complexity of a build system that can build almost anything but, in fact, its use is as simple as it gets. This is not a complete guide into CMake, but one to get you started. If you want to read more about CMake, I recommend you read more about Modern CMake .","title":"Introduction"},{"location":"content/cmake/cmake/#requirements","text":"To start with CMake, I'd need a CMakeLists.txt file like this: cmake_minimum_required ( VERSION 3.16.0 ) project ( test_c ) add_executable ( test test.c ) And a test.c file like this: #include <stdio.h> int add ( int a , int b ) { return a + b ; } int main () { int a , b ; printf ( \"Enter number a: \" ); scanf ( \"%d\" , & a ); printf ( \"Enter number b: \" ); scanf ( \"%d\" , & b ); printf ( \"Adding result -> %d\" , add ( a , b )); } With a project structure as such: -- CMakeLists.txt -- test.c The fun thing about CMake is that you only need to run cmake once: $ mkdir build $ cmake -B build/ This will generate the Makefile inside the build/ folder. Next, jump into the directory created and generate the Makefile: $ cd build $ make Once this is done, you will end up with something like this: -- build -- Makefile -- test -- CMakeLists.txt -- test.c Running make has generated the test executable. Now, run: $ ./test Done \ud83d\udc4d\ud83c\udffc","title":"Requirements"},{"location":"content/cmake/cmake/#adding-libraries","text":"Adding a library is easy. Let's start with this directory structure: -- CMakeLists.txt -- test.c -- /test_lib -- test_lib.c -- test_lib.h Inside test.c : #include <stdio.h> #include \"test_lib.h\" int add ( int a , int b ) { return a + b ; } int main () { int a , b ; printf ( \"Enter number a: \" ); scanf ( \"%d\" , & a ); printf ( \"Enter number b: \" ); scanf ( \"%d\" , & b ); printf ( \"Mux result -> %d\" , mux ( a , b )); // Uses `mux` method } Inside test_lib.h : int mux ( int a , int b ); Inside test_lib.c : #include \"test_lib.h\" int mux ( int a , int b ) { return a * b ; } Finally, to add this as library to the executable target test , add: cmake_minimum_required ( VERSION 3.16.0 ) project ( test_c ) add_library ( test_lib ${ CMAKE_CURRENT_SOURCE_DIR } /test_lib/test_lib.c ) target_include_directories ( test_lib PUBLIC ${ CMAKE_CURRENT_SOURCE_DIR } /test_lib ) add_executable ( test src/test.c ) target_link_libraries ( test test_lib ) The add_library creates a target (test_lib) that points to the test_lib.c file and target_link_libraries links the test_lib target to the executable test target. Hit $ make again \ud83d\udc4d\ud83c\udffc","title":"Adding libraries"},{"location":"content/cmake/cmake/#adding-an-external-library","text":"Imagine the scenario where you have your project and want to include an external library you have seen on Github. This is your project structure: CMakeLists.txt -- /src -- test.c -- /test_lib -- test_lib.c -- test_lib.h -- CMakeLists.txt The folder src has the file we want to execute and test.c contains the int main() function. The test_lib folder contains one executable file, one header and one CMakeLists.txt. Inside test_lib/CMakeLists.txt we have the following: # The library `test_lib` should ideally be one step below set ( TEST_LIB_PATH ${ CMAKE_CURRENT_SOURCE_DIR } ) # Set it up as a library. add_library ( test_lib ${ TEST_LIB_PATH } /test_lib.c ) # Turn it into a searchable field in PUBLIC. This means any target that includes # this library is capable of looking for the directory passed below. target_include_directories ( test_lib PUBLIC ${ TEST_LIB_PATH } ) There, the library is created and placed under a PUBLIC inheritance. If you don't know which inheritance to choose, leave it blank and CMake will default it to PUBLIC. Nevertheless, this is a library you just downloaded and want to include it inside you project. The magic happens in the root CMakeLists.txt: cmake_minimum_required ( VERSION 3.16.0 ) project ( test_c VERSION 1.0 DESCRIPTION \"An example project with CMake\" LANGUAGES C ) set_property ( GLOBAL PROPERTY USE_FOLDERS ON ) add_executable ( test ${ CMAKE_CURRENT_SOURCE_DIR } /src/test.c ) add_subdirectory ( test_lib ) target_link_libraries ( test PRIVATE test_lib ) add_custom_command ( TARGET test POST_BUILD COMMENT \"Running ./test\" COMMAND ./test ) You can easily add the external library by calling add_subdirectory and the target library name you've created in test_lib/CMakeLists.txt as an argument. Once you add the subdirectory, you need to link it to the executable target, test . You can link it as PRIVATE since you won't share this subdirectory anywhere else. Finally, instead of runnning $ make and then $ ./test , you can ask CMake to do that for you by using the add_custom_command method. As an argument of add_custom_command , add COMMAND followed by the command you want to run. The POST_BUILD keyword makes sure the command will only run after building the code. Hit $ make \ud83d\udc4d\ud83c\udffc","title":"Adding an external library"}]}